// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	azure "github.com/ca-risken/datasource-api/proto/azure"

	db "github.com/ca-risken/datasource-api/pkg/db"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/datasource-api/pkg/model"
)

// AzureRepoInterface is an autogenerated mock type for the AzureRepoInterface type
type AzureRepoInterface struct {
	mock.Mock
}

// DeleteAzure provides a mock function with given fields: ctx, projectID, azureID
func (_m *AzureRepoInterface) DeleteAzure(ctx context.Context, projectID uint32, azureID uint32) error {
	ret := _m.Called(ctx, projectID, azureID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAzure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, azureID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRelAzureDataSource provides a mock function with given fields: ctx, projectID, azureID, azureDataSourceID
func (_m *AzureRepoInterface) DeleteRelAzureDataSource(ctx context.Context, projectID uint32, azureID uint32, azureDataSourceID uint32) error {
	ret := _m.Called(ctx, projectID, azureID, azureDataSourceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelAzureDataSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, azureID, azureDataSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAzure provides a mock function with given fields: ctx, projectID, azureID
func (_m *AzureRepoInterface) GetAzure(ctx context.Context, projectID uint32, azureID uint32) (*model.Azure, error) {
	ret := _m.Called(ctx, projectID, azureID)

	if len(ret) == 0 {
		panic("no return value specified for GetAzure")
	}

	var r0 *model.Azure
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.Azure, error)); ok {
		return rf(ctx, projectID, azureID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.Azure); ok {
		r0 = rf(ctx, projectID, azureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Azure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, azureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelAzureDataSource provides a mock function with given fields: ctx, projectID, azureID, azureDataSourceID
func (_m *AzureRepoInterface) GetRelAzureDataSource(ctx context.Context, projectID uint32, azureID uint32, azureDataSourceID uint32) (*db.RelAzureDataSource, error) {
	ret := _m.Called(ctx, projectID, azureID, azureDataSourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetRelAzureDataSource")
	}

	var r0 *db.RelAzureDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) (*db.RelAzureDataSource, error)); ok {
		return rf(ctx, projectID, azureID, azureDataSourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) *db.RelAzureDataSource); ok {
		r0 = rf(ctx, projectID, azureID, azureDataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RelAzureDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, azureID, azureDataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzure provides a mock function with given fields: ctx, projectID, azureID, azureProjectID
func (_m *AzureRepoInterface) ListAzure(ctx context.Context, projectID uint32, azureID uint32, azureProjectID string) (*[]model.Azure, error) {
	ret := _m.Called(ctx, projectID, azureID, azureProjectID)

	if len(ret) == 0 {
		panic("no return value specified for ListAzure")
	}

	var r0 *[]model.Azure
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*[]model.Azure, error)); ok {
		return rf(ctx, projectID, azureID, azureProjectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *[]model.Azure); ok {
		r0 = rf(ctx, projectID, azureID, azureProjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Azure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, projectID, azureID, azureProjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzureDataSource provides a mock function with given fields: ctx, azureDataSourceID, name
func (_m *AzureRepoInterface) ListAzureDataSource(ctx context.Context, azureDataSourceID uint32, name string) (*[]model.AzureDataSource, error) {
	ret := _m.Called(ctx, azureDataSourceID, name)

	if len(ret) == 0 {
		panic("no return value specified for ListAzureDataSource")
	}

	var r0 *[]model.AzureDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*[]model.AzureDataSource, error)); ok {
		return rf(ctx, azureDataSourceID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *[]model.AzureDataSource); ok {
		r0 = rf(ctx, azureDataSourceID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.AzureDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, azureDataSourceID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzureScanErrorForNotify provides a mock function with given fields: ctx
func (_m *AzureRepoInterface) ListAzureScanErrorForNotify(ctx context.Context) ([]*db.AzureScanError, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAzureScanErrorForNotify")
	}

	var r0 []*db.AzureScanError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*db.AzureScanError, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*db.AzureScanError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.AzureScanError)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelAzureDataSource provides a mock function with given fields: ctx, projectID, azureID
func (_m *AzureRepoInterface) ListRelAzureDataSource(ctx context.Context, projectID uint32, azureID uint32) (*[]db.RelAzureDataSource, error) {
	ret := _m.Called(ctx, projectID, azureID)

	if len(ret) == 0 {
		panic("no return value specified for ListRelAzureDataSource")
	}

	var r0 *[]db.RelAzureDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*[]db.RelAzureDataSource, error)); ok {
		return rf(ctx, projectID, azureID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *[]db.RelAzureDataSource); ok {
		r0 = rf(ctx, projectID, azureID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.RelAzureDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, azureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelAzureDataSourceByDataSourceID provides a mock function with given fields: ctx, azureDataSourceID
func (_m *AzureRepoInterface) ListRelAzureDataSourceByDataSourceID(ctx context.Context, azureDataSourceID uint32) (*[]db.RelAzureDataSource, error) {
	ret := _m.Called(ctx, azureDataSourceID)

	if len(ret) == 0 {
		panic("no return value specified for ListRelAzureDataSourceByDataSourceID")
	}

	var r0 *[]db.RelAzureDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]db.RelAzureDataSource, error)); ok {
		return rf(ctx, azureDataSourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]db.RelAzureDataSource); ok {
		r0 = rf(ctx, azureDataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.RelAzureDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, azureDataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAzureErrorNotifiedAt provides a mock function with given fields: ctx, errNotifiedAt, azureID, azureDataSourceID, projectID
func (_m *AzureRepoInterface) UpdateAzureErrorNotifiedAt(ctx context.Context, errNotifiedAt interface{}, azureID uint32, azureDataSourceID uint32, projectID uint32) error {
	ret := _m.Called(ctx, errNotifiedAt, azureID, azureDataSourceID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAzureErrorNotifiedAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, errNotifiedAt, azureID, azureDataSourceID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertAzure provides a mock function with given fields: ctx, _a1
func (_m *AzureRepoInterface) UpsertAzure(ctx context.Context, _a1 *azure.AzureForUpsert) (*model.Azure, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAzure")
	}

	var r0 *model.Azure
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AzureForUpsert) (*model.Azure, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AzureForUpsert) *model.Azure); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Azure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.AzureForUpsert) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRelAzureDataSource provides a mock function with given fields: ctx, relAzureDataSource
func (_m *AzureRepoInterface) UpsertRelAzureDataSource(ctx context.Context, relAzureDataSource *azure.RelAzureDataSourceForUpsert) (*db.RelAzureDataSource, error) {
	ret := _m.Called(ctx, relAzureDataSource)

	if len(ret) == 0 {
		panic("no return value specified for UpsertRelAzureDataSource")
	}

	var r0 *db.RelAzureDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.RelAzureDataSourceForUpsert) (*db.RelAzureDataSource, error)); ok {
		return rf(ctx, relAzureDataSource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.RelAzureDataSourceForUpsert) *db.RelAzureDataSource); ok {
		r0 = rf(ctx, relAzureDataSource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RelAzureDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.RelAzureDataSourceForUpsert) error); ok {
		r1 = rf(ctx, relAzureDataSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAzureRepoInterface creates a new instance of AzureRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureRepoInterface {
	mock := &AzureRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
