// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/datasource-api/pkg/model"
)

// OSINTRepoInterface is an autogenerated mock type for the OSINTRepoInterface type
type OSINTRepoInterface struct {
	mock.Mock
}

// DeleteOsint provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) DeleteOsint(_a0 context.Context, _a1 uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOsintDataSource provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) DeleteOsintDataSource(_a0 context.Context, _a1 uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOsintDetectWord provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) DeleteOsintDetectWord(_a0 context.Context, _a1 uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRelOsintDataSource provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) DeleteRelOsintDataSource(_a0 context.Context, _a1 uint32, _a2 uint32) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOsint provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) GetOsint(_a0 context.Context, _a1 uint32, _a2 uint32) (*model.Osint, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.Osint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.Osint, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.Osint); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Osint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOsintDataSource provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) GetOsintDataSource(_a0 context.Context, _a1 uint32, _a2 uint32) (*model.OsintDataSource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.OsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OsintDataSource, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OsintDataSource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOsintDetectWord provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) GetOsintDetectWord(_a0 context.Context, _a1 uint32, _a2 uint32) (*model.OsintDetectWord, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.OsintDetectWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.OsintDetectWord, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.OsintDetectWord); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OsintDetectWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelOsintDataSource provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) GetRelOsintDataSource(_a0 context.Context, _a1 uint32, _a2 uint32) (*model.RelOsintDataSource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.RelOsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.RelOsintDataSource, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.RelOsintDataSource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RelOsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllRelOsintDataSource provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) ListAllRelOsintDataSource(_a0 context.Context, _a1 uint32) (*[]model.RelOsintDataSource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]model.RelOsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]model.RelOsintDataSource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]model.RelOsintDataSource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.RelOsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOsint provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) ListOsint(_a0 context.Context, _a1 uint32) (*[]model.Osint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]model.Osint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]model.Osint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]model.Osint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Osint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOsintDataSource provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) ListOsintDataSource(_a0 context.Context, _a1 uint32, _a2 string) (*[]model.OsintDataSource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *[]model.OsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*[]model.OsintDataSource, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *[]model.OsintDataSource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.OsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOsintDetectWord provides a mock function with given fields: _a0, _a1, _a2
func (_m *OSINTRepoInterface) ListOsintDetectWord(_a0 context.Context, _a1 uint32, _a2 uint32) (*[]model.OsintDetectWord, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *[]model.OsintDetectWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*[]model.OsintDetectWord, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *[]model.OsintDetectWord); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.OsintDetectWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelOsintDataSource provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *OSINTRepoInterface) ListRelOsintDataSource(_a0 context.Context, _a1 uint32, _a2 uint32, _a3 uint32) (*[]model.RelOsintDataSource, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *[]model.RelOsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) (*[]model.RelOsintDataSource, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) *[]model.RelOsintDataSource); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.RelOsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, uint32) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertOsint provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) UpsertOsint(_a0 context.Context, _a1 *model.Osint) (*model.Osint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Osint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Osint) (*model.Osint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Osint) *model.Osint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Osint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Osint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertOsintDataSource provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) UpsertOsintDataSource(_a0 context.Context, _a1 *model.OsintDataSource) (*model.OsintDataSource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.OsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OsintDataSource) (*model.OsintDataSource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OsintDataSource) *model.OsintDataSource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OsintDataSource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertOsintDetectWord provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) UpsertOsintDetectWord(_a0 context.Context, _a1 *model.OsintDetectWord) (*model.OsintDetectWord, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.OsintDetectWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OsintDetectWord) (*model.OsintDetectWord, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OsintDetectWord) *model.OsintDetectWord); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OsintDetectWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OsintDetectWord) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertRelOsintDataSource provides a mock function with given fields: _a0, _a1
func (_m *OSINTRepoInterface) UpsertRelOsintDataSource(_a0 context.Context, _a1 *model.RelOsintDataSource) (*model.RelOsintDataSource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.RelOsintDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RelOsintDataSource) (*model.RelOsintDataSource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RelOsintDataSource) *model.RelOsintDataSource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RelOsintDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RelOsintDataSource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOSINTRepoInterface creates a new instance of OSINTRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOSINTRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OSINTRepoInterface {
	mock := &OSINTRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
