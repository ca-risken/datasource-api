// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/ca-risken/datasource-api/proto/aws"

	db "github.com/ca-risken/datasource-api/pkg/db"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/datasource-api/pkg/model"
)

// AWSRepoInterface is an autogenerated mock type for the AWSRepoInterface type
type AWSRepoInterface struct {
	mock.Mock
}

// DeleteAWS provides a mock function with given fields: ctx, projectID, awsID
func (_m *AWSRepoInterface) DeleteAWS(ctx context.Context, projectID uint32, awsID uint32) error {
	ret := _m.Called(ctx, projectID, awsID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAWS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, awsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAWSRelDataSource provides a mock function with given fields: ctx, projectID, awsID, awsDataSourceID
func (_m *AWSRepoInterface) DeleteAWSRelDataSource(ctx context.Context, projectID uint32, awsID uint32, awsDataSourceID uint32) error {
	ret := _m.Called(ctx, projectID, awsID, awsDataSourceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAWSRelDataSource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, awsID, awsDataSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAWSByAccountID provides a mock function with given fields: ctx, projectID, awsAccountID
func (_m *AWSRepoInterface) GetAWSByAccountID(ctx context.Context, projectID uint32, awsAccountID string) (*model.AWS, error) {
	ret := _m.Called(ctx, projectID, awsAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSByAccountID")
	}

	var r0 *model.AWS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*model.AWS, error)); ok {
		return rf(ctx, projectID, awsAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *model.AWS); ok {
		r0 = rf(ctx, projectID, awsAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AWS)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, projectID, awsAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSDataSourceForMessage provides a mock function with given fields: ctx, awsID, awsDataSourceID, projectID
func (_m *AWSRepoInterface) GetAWSDataSourceForMessage(ctx context.Context, awsID uint32, awsDataSourceID uint32, projectID uint32) (*db.DataSource, error) {
	ret := _m.Called(ctx, awsID, awsDataSourceID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSDataSourceForMessage")
	}

	var r0 *db.DataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) (*db.DataSource, error)); ok {
		return rf(ctx, awsID, awsDataSourceID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) *db.DataSource); ok {
		r0 = rf(ctx, awsID, awsDataSourceID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, uint32) error); ok {
		r1 = rf(ctx, awsID, awsDataSourceID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSRelDataSourceByAccountID provides a mock function with given fields: ctx, projectID, awsAccountID
func (_m *AWSRepoInterface) GetAWSRelDataSourceByAccountID(ctx context.Context, projectID uint32, awsAccountID string) (*model.AWSRelDataSource, error) {
	ret := _m.Called(ctx, projectID, awsAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSRelDataSourceByAccountID")
	}

	var r0 *model.AWSRelDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*model.AWSRelDataSource, error)); ok {
		return rf(ctx, projectID, awsAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *model.AWSRelDataSource); ok {
		r0 = rf(ctx, projectID, awsAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AWSRelDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, projectID, awsAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSRelDataSourceByID provides a mock function with given fields: ctx, awsID, awsDataSourceID, projectID
func (_m *AWSRepoInterface) GetAWSRelDataSourceByID(ctx context.Context, awsID uint32, awsDataSourceID uint32, projectID uint32) (*model.AWSRelDataSource, error) {
	ret := _m.Called(ctx, awsID, awsDataSourceID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSRelDataSourceByID")
	}

	var r0 *model.AWSRelDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) (*model.AWSRelDataSource, error)); ok {
		return rf(ctx, awsID, awsDataSourceID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) *model.AWSRelDataSource); ok {
		r0 = rf(ctx, awsID, awsDataSourceID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AWSRelDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, uint32) error); ok {
		r1 = rf(ctx, awsID, awsDataSourceID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWS provides a mock function with given fields: ctx, projectID, awsID, awsAccountID
func (_m *AWSRepoInterface) ListAWS(ctx context.Context, projectID uint32, awsID uint32, awsAccountID string) (*[]model.AWS, error) {
	ret := _m.Called(ctx, projectID, awsID, awsAccountID)

	if len(ret) == 0 {
		panic("no return value specified for ListAWS")
	}

	var r0 *[]model.AWS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*[]model.AWS, error)); ok {
		return rf(ctx, projectID, awsID, awsAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *[]model.AWS); ok {
		r0 = rf(ctx, projectID, awsID, awsAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.AWS)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, projectID, awsID, awsAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSDataSource provides a mock function with given fields: ctx, projectID, awsID, ds
func (_m *AWSRepoInterface) ListAWSDataSource(ctx context.Context, projectID uint32, awsID uint32, ds string) (*[]db.DataSource, error) {
	ret := _m.Called(ctx, projectID, awsID, ds)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSDataSource")
	}

	var r0 *[]db.DataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*[]db.DataSource, error)); ok {
		return rf(ctx, projectID, awsID, ds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *[]db.DataSource); ok {
		r0 = rf(ctx, projectID, awsID, ds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.DataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, projectID, awsID, ds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSRelDataSource provides a mock function with given fields: ctx, projectID, awsID
func (_m *AWSRepoInterface) ListAWSRelDataSource(ctx context.Context, projectID uint32, awsID uint32) (*[]model.AWSRelDataSource, error) {
	ret := _m.Called(ctx, projectID, awsID)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSRelDataSource")
	}

	var r0 *[]model.AWSRelDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*[]model.AWSRelDataSource, error)); ok {
		return rf(ctx, projectID, awsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *[]model.AWSRelDataSource); ok {
		r0 = rf(ctx, projectID, awsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.AWSRelDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, awsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSScanErrorForNotify provides a mock function with given fields: ctx
func (_m *AWSRepoInterface) ListAWSScanErrorForNotify(ctx context.Context) ([]*db.AWSScanError, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSScanErrorForNotify")
	}

	var r0 []*db.AWSScanError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*db.AWSScanError, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*db.AWSScanError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.AWSScanError)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSourceByAWSDataSourceID provides a mock function with given fields: ctx, awsDataSourceID
func (_m *AWSRepoInterface) ListDataSourceByAWSDataSourceID(ctx context.Context, awsDataSourceID uint32) (*[]db.DataSource, error) {
	ret := _m.Called(ctx, awsDataSourceID)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSourceByAWSDataSourceID")
	}

	var r0 *[]db.DataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]db.DataSource, error)); ok {
		return rf(ctx, awsDataSourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]db.DataSource); ok {
		r0 = rf(ctx, awsDataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.DataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, awsDataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAWSErrorNotifiedAt provides a mock function with given fields: ctx, errNotifiedAt, awsID, awsDataSourceID, projectID
func (_m *AWSRepoInterface) UpdateAWSErrorNotifiedAt(ctx context.Context, errNotifiedAt interface{}, awsID uint32, awsDataSourceID uint32, projectID uint32) error {
	ret := _m.Called(ctx, errNotifiedAt, awsID, awsDataSourceID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAWSErrorNotifiedAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, errNotifiedAt, awsID, awsDataSourceID, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertAWS provides a mock function with given fields: ctx, data
func (_m *AWSRepoInterface) UpsertAWS(ctx context.Context, data *model.AWS) (*model.AWS, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAWS")
	}

	var r0 *model.AWS
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AWS) (*model.AWS, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.AWS) *model.AWS); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AWS)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.AWS) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertAWSRelDataSource provides a mock function with given fields: ctx, data
func (_m *AWSRepoInterface) UpsertAWSRelDataSource(ctx context.Context, data *aws.DataSourceForAttach) (*model.AWSRelDataSource, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAWSRelDataSource")
	}

	var r0 *model.AWSRelDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DataSourceForAttach) (*model.AWSRelDataSource, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DataSourceForAttach) *model.AWSRelDataSource); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AWSRelDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aws.DataSourceForAttach) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAWSRepoInterface creates a new instance of AWSRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAWSRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AWSRepoInterface {
	mock := &AWSRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
