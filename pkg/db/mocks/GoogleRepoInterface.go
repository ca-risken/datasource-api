// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/ca-risken/datasource-api/pkg/db"
	google "github.com/ca-risken/datasource-api/proto/google"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ca-risken/datasource-api/pkg/model"
)

// GoogleRepoInterface is an autogenerated mock type for the GoogleRepoInterface type
type GoogleRepoInterface struct {
	mock.Mock
}

// DeleteGCP provides a mock function with given fields: ctx, projectID, gcpID
func (_m *GoogleRepoInterface) DeleteGCP(ctx context.Context, projectID uint32, gcpID uint32) error {
	ret := _m.Called(ctx, projectID, gcpID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, gcpID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGCPDataSource provides a mock function with given fields: ctx, projectID, gcpID, googleDataSourceID
func (_m *GoogleRepoInterface) DeleteGCPDataSource(ctx context.Context, projectID uint32, gcpID uint32, googleDataSourceID uint32) error {
	ret := _m.Called(ctx, projectID, gcpID, googleDataSourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) error); ok {
		r0 = rf(ctx, projectID, gcpID, googleDataSourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGCP provides a mock function with given fields: ctx, projectID, gcpID
func (_m *GoogleRepoInterface) GetGCP(ctx context.Context, projectID uint32, gcpID uint32) (*model.GCP, error) {
	ret := _m.Called(ctx, projectID, gcpID)

	var r0 *model.GCP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*model.GCP, error)); ok {
		return rf(ctx, projectID, gcpID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *model.GCP); ok {
		r0 = rf(ctx, projectID, gcpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GCP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, gcpID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCPDataSource provides a mock function with given fields: ctx, projectID, gcpID, googleDataSourceID
func (_m *GoogleRepoInterface) GetGCPDataSource(ctx context.Context, projectID uint32, gcpID uint32, googleDataSourceID uint32) (*db.GCPDataSource, error) {
	ret := _m.Called(ctx, projectID, gcpID, googleDataSourceID)

	var r0 *db.GCPDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) (*db.GCPDataSource, error)); ok {
		return rf(ctx, projectID, gcpID, googleDataSourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, uint32) *db.GCPDataSource); ok {
		r0 = rf(ctx, projectID, gcpID, googleDataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.GCPDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, gcpID, googleDataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCP provides a mock function with given fields: ctx, projectID, gcpID, gcpProjectID
func (_m *GoogleRepoInterface) ListGCP(ctx context.Context, projectID uint32, gcpID uint32, gcpProjectID string) (*[]model.GCP, error) {
	ret := _m.Called(ctx, projectID, gcpID, gcpProjectID)

	var r0 *[]model.GCP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) (*[]model.GCP, error)); ok {
		return rf(ctx, projectID, gcpID, gcpProjectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32, string) *[]model.GCP); ok {
		r0 = rf(ctx, projectID, gcpID, gcpProjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.GCP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32, string) error); ok {
		r1 = rf(ctx, projectID, gcpID, gcpProjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCPDataSource provides a mock function with given fields: ctx, projectID, gcpID
func (_m *GoogleRepoInterface) ListGCPDataSource(ctx context.Context, projectID uint32, gcpID uint32) (*[]db.GCPDataSource, error) {
	ret := _m.Called(ctx, projectID, gcpID)

	var r0 *[]db.GCPDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (*[]db.GCPDataSource, error)); ok {
		return rf(ctx, projectID, gcpID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) *[]db.GCPDataSource); ok {
		r0 = rf(ctx, projectID, gcpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.GCPDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, projectID, gcpID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCPDataSourceByDataSourceID provides a mock function with given fields: ctx, googleDataSourceID
func (_m *GoogleRepoInterface) ListGCPDataSourceByDataSourceID(ctx context.Context, googleDataSourceID uint32) (*[]db.GCPDataSource, error) {
	ret := _m.Called(ctx, googleDataSourceID)

	var r0 *[]db.GCPDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (*[]db.GCPDataSource, error)); ok {
		return rf(ctx, googleDataSourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *[]db.GCPDataSource); ok {
		r0 = rf(ctx, googleDataSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]db.GCPDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, googleDataSourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGoogleDataSource provides a mock function with given fields: ctx, googleDataSourceID, name
func (_m *GoogleRepoInterface) ListGoogleDataSource(ctx context.Context, googleDataSourceID uint32, name string) (*[]model.GoogleDataSource, error) {
	ret := _m.Called(ctx, googleDataSourceID, name)

	var r0 *[]model.GoogleDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (*[]model.GoogleDataSource, error)); ok {
		return rf(ctx, googleDataSourceID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) *[]model.GoogleDataSource); ok {
		r0 = rf(ctx, googleDataSourceID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.GoogleDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, googleDataSourceID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertGCP provides a mock function with given fields: ctx, gcp
func (_m *GoogleRepoInterface) UpsertGCP(ctx context.Context, gcp *google.GCPForUpsert) (*model.GCP, error) {
	ret := _m.Called(ctx, gcp)

	var r0 *model.GCP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.GCPForUpsert) (*model.GCP, error)); ok {
		return rf(ctx, gcp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.GCPForUpsert) *model.GCP); ok {
		r0 = rf(ctx, gcp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GCP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.GCPForUpsert) error); ok {
		r1 = rf(ctx, gcp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertGCPDataSource provides a mock function with given fields: ctx, gcpDataSource
func (_m *GoogleRepoInterface) UpsertGCPDataSource(ctx context.Context, gcpDataSource *google.GCPDataSourceForUpsert) (*db.GCPDataSource, error) {
	ret := _m.Called(ctx, gcpDataSource)

	var r0 *db.GCPDataSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.GCPDataSourceForUpsert) (*db.GCPDataSource, error)); ok {
		return rf(ctx, gcpDataSource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.GCPDataSourceForUpsert) *db.GCPDataSource); ok {
		r0 = rf(ctx, gcpDataSource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.GCPDataSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.GCPDataSourceForUpsert) error); ok {
		r1 = rf(ctx, gcpDataSource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGoogleRepoInterface creates a new instance of GoogleRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleRepoInterface {
	mock := &GoogleRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
