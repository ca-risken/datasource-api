// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	assetpb "cloud.google.com/go/asset/apiv1/assetpb"

	gcp "github.com/ca-risken/datasource-api/pkg/gcp"

	mock "github.com/stretchr/testify/mock"
)

// GcpServiceClient is an autogenerated mock type for the GcpServiceClient type
type GcpServiceClient struct {
	mock.Mock
}

// DescribeInstance provides a mock function with given fields: ctx, projectID, zone, instanceName
func (_m *GcpServiceClient) DescribeInstance(ctx context.Context, projectID string, zone string, instanceName string) (*gcp.Compute, error) {
	ret := _m.Called(ctx, projectID, zone, instanceName)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstance")
	}

	var r0 *gcp.Compute
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gcp.Compute, error)); ok {
		return rf(ctx, projectID, zone, instanceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gcp.Compute); ok {
		r0 = rf(ctx, projectID, zone, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcp.Compute)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, zone, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: ctx, gcpProjectID, resourceName
func (_m *GcpServiceClient) GetAsset(ctx context.Context, gcpProjectID string, resourceName string) (*assetpb.ResourceSearchResult, error) {
	ret := _m.Called(ctx, gcpProjectID, resourceName)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 *assetpb.ResourceSearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*assetpb.ResourceSearchResult, error)); ok {
		return rf(ctx, gcpProjectID, resourceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *assetpb.ResourceSearchResult); ok {
		r0 = rf(ctx, gcpProjectID, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assetpb.ResourceSearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, gcpProjectID, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyCode provides a mock function with given fields: ctx, gcpProjectID, verificationCode
func (_m *GcpServiceClient) VerifyCode(ctx context.Context, gcpProjectID string, verificationCode string) (bool, error) {
	ret := _m.Called(ctx, gcpProjectID, verificationCode)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, gcpProjectID, verificationCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, gcpProjectID, verificationCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, gcpProjectID, verificationCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGcpServiceClient creates a new instance of GcpServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGcpServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GcpServiceClient {
	mock := &GcpServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
