// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	diagnosis "github.com/ca-risken/datasource-api/proto/diagnosis"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DiagnosisServiceClient is an autogenerated mock type for the DiagnosisServiceClient type
type DiagnosisServiceClient struct {
	mock.Mock
}

// DeleteApplicationScan provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeleteApplicationScan(ctx context.Context, in *diagnosis.DeleteApplicationScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationScan")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteApplicationScanRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteApplicationScanRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeleteApplicationScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationScanBasicSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeleteApplicationScanBasicSetting(ctx context.Context, in *diagnosis.DeleteApplicationScanBasicSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationScanBasicSetting")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteApplicationScanBasicSettingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteApplicationScanBasicSettingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeleteApplicationScanBasicSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiagnosisDataSource provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeleteDiagnosisDataSource(ctx context.Context, in *diagnosis.DeleteDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDiagnosisDataSource")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteDiagnosisDataSourceRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteDiagnosisDataSourceRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeleteDiagnosisDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePortscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeletePortscanSetting(ctx context.Context, in *diagnosis.DeletePortscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePortscanSetting")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeletePortscanSettingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeletePortscanSettingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeletePortscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePortscanTarget provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeletePortscanTarget(ctx context.Context, in *diagnosis.DeletePortscanTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePortscanTarget")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeletePortscanTargetRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeletePortscanTargetRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeletePortscanTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWpscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) DeleteWpscanSetting(ctx context.Context, in *diagnosis.DeleteWpscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWpscanSetting")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteWpscanSettingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.DeleteWpscanSettingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.DeleteWpscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationScan provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetApplicationScan(ctx context.Context, in *diagnosis.GetApplicationScanRequest, opts ...grpc.CallOption) (*diagnosis.GetApplicationScanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationScan")
	}

	var r0 *diagnosis.GetApplicationScanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetApplicationScanRequest, ...grpc.CallOption) (*diagnosis.GetApplicationScanResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetApplicationScanRequest, ...grpc.CallOption) *diagnosis.GetApplicationScanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetApplicationScanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetApplicationScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationScanBasicSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetApplicationScanBasicSetting(ctx context.Context, in *diagnosis.GetApplicationScanBasicSettingRequest, opts ...grpc.CallOption) (*diagnosis.GetApplicationScanBasicSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationScanBasicSetting")
	}

	var r0 *diagnosis.GetApplicationScanBasicSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetApplicationScanBasicSettingRequest, ...grpc.CallOption) (*diagnosis.GetApplicationScanBasicSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetApplicationScanBasicSettingRequest, ...grpc.CallOption) *diagnosis.GetApplicationScanBasicSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetApplicationScanBasicSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetApplicationScanBasicSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiagnosisDataSource provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetDiagnosisDataSource(ctx context.Context, in *diagnosis.GetDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*diagnosis.GetDiagnosisDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiagnosisDataSource")
	}

	var r0 *diagnosis.GetDiagnosisDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetDiagnosisDataSourceRequest, ...grpc.CallOption) (*diagnosis.GetDiagnosisDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetDiagnosisDataSourceRequest, ...grpc.CallOption) *diagnosis.GetDiagnosisDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetDiagnosisDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetDiagnosisDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetPortscanSetting(ctx context.Context, in *diagnosis.GetPortscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.GetPortscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortscanSetting")
	}

	var r0 *diagnosis.GetPortscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetPortscanSettingRequest, ...grpc.CallOption) (*diagnosis.GetPortscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetPortscanSettingRequest, ...grpc.CallOption) *diagnosis.GetPortscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetPortscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetPortscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortscanTarget provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetPortscanTarget(ctx context.Context, in *diagnosis.GetPortscanTargetRequest, opts ...grpc.CallOption) (*diagnosis.GetPortscanTargetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPortscanTarget")
	}

	var r0 *diagnosis.GetPortscanTargetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetPortscanTargetRequest, ...grpc.CallOption) (*diagnosis.GetPortscanTargetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetPortscanTargetRequest, ...grpc.CallOption) *diagnosis.GetPortscanTargetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetPortscanTargetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetPortscanTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWpscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) GetWpscanSetting(ctx context.Context, in *diagnosis.GetWpscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.GetWpscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWpscanSetting")
	}

	var r0 *diagnosis.GetWpscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetWpscanSettingRequest, ...grpc.CallOption) (*diagnosis.GetWpscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.GetWpscanSettingRequest, ...grpc.CallOption) *diagnosis.GetWpscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.GetWpscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.GetWpscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScan provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) InvokeScan(ctx context.Context, in *diagnosis.InvokeScanRequest, opts ...grpc.CallOption) (*diagnosis.InvokeScanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScan")
	}

	var r0 *diagnosis.InvokeScanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.InvokeScanRequest, ...grpc.CallOption) (*diagnosis.InvokeScanResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.InvokeScanRequest, ...grpc.CallOption) *diagnosis.InvokeScanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.InvokeScanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.InvokeScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) InvokeScanAll(ctx context.Context, in *diagnosis.InvokeScanAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScanAll")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.InvokeScanAllRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.InvokeScanAllRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.InvokeScanAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationScan provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListApplicationScan(ctx context.Context, in *diagnosis.ListApplicationScanRequest, opts ...grpc.CallOption) (*diagnosis.ListApplicationScanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationScan")
	}

	var r0 *diagnosis.ListApplicationScanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListApplicationScanRequest, ...grpc.CallOption) (*diagnosis.ListApplicationScanResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListApplicationScanRequest, ...grpc.CallOption) *diagnosis.ListApplicationScanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListApplicationScanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListApplicationScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationScanBasicSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListApplicationScanBasicSetting(ctx context.Context, in *diagnosis.ListApplicationScanBasicSettingRequest, opts ...grpc.CallOption) (*diagnosis.ListApplicationScanBasicSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationScanBasicSetting")
	}

	var r0 *diagnosis.ListApplicationScanBasicSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListApplicationScanBasicSettingRequest, ...grpc.CallOption) (*diagnosis.ListApplicationScanBasicSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListApplicationScanBasicSettingRequest, ...grpc.CallOption) *diagnosis.ListApplicationScanBasicSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListApplicationScanBasicSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListApplicationScanBasicSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiagnosisDataSource provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListDiagnosisDataSource(ctx context.Context, in *diagnosis.ListDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*diagnosis.ListDiagnosisDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDiagnosisDataSource")
	}

	var r0 *diagnosis.ListDiagnosisDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListDiagnosisDataSourceRequest, ...grpc.CallOption) (*diagnosis.ListDiagnosisDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListDiagnosisDataSourceRequest, ...grpc.CallOption) *diagnosis.ListDiagnosisDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListDiagnosisDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListDiagnosisDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListPortscanSetting(ctx context.Context, in *diagnosis.ListPortscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.ListPortscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortscanSetting")
	}

	var r0 *diagnosis.ListPortscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListPortscanSettingRequest, ...grpc.CallOption) (*diagnosis.ListPortscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListPortscanSettingRequest, ...grpc.CallOption) *diagnosis.ListPortscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListPortscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListPortscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortscanTarget provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListPortscanTarget(ctx context.Context, in *diagnosis.ListPortscanTargetRequest, opts ...grpc.CallOption) (*diagnosis.ListPortscanTargetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortscanTarget")
	}

	var r0 *diagnosis.ListPortscanTargetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListPortscanTargetRequest, ...grpc.CallOption) (*diagnosis.ListPortscanTargetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListPortscanTargetRequest, ...grpc.CallOption) *diagnosis.ListPortscanTargetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListPortscanTargetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListPortscanTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWpscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) ListWpscanSetting(ctx context.Context, in *diagnosis.ListWpscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.ListWpscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWpscanSetting")
	}

	var r0 *diagnosis.ListWpscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListWpscanSettingRequest, ...grpc.CallOption) (*diagnosis.ListWpscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.ListWpscanSettingRequest, ...grpc.CallOption) *diagnosis.ListWpscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.ListWpscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.ListWpscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationScan provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutApplicationScan(ctx context.Context, in *diagnosis.PutApplicationScanRequest, opts ...grpc.CallOption) (*diagnosis.PutApplicationScanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationScan")
	}

	var r0 *diagnosis.PutApplicationScanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutApplicationScanRequest, ...grpc.CallOption) (*diagnosis.PutApplicationScanResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutApplicationScanRequest, ...grpc.CallOption) *diagnosis.PutApplicationScanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutApplicationScanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutApplicationScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationScanBasicSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutApplicationScanBasicSetting(ctx context.Context, in *diagnosis.PutApplicationScanBasicSettingRequest, opts ...grpc.CallOption) (*diagnosis.PutApplicationScanBasicSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationScanBasicSetting")
	}

	var r0 *diagnosis.PutApplicationScanBasicSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutApplicationScanBasicSettingRequest, ...grpc.CallOption) (*diagnosis.PutApplicationScanBasicSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutApplicationScanBasicSettingRequest, ...grpc.CallOption) *diagnosis.PutApplicationScanBasicSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutApplicationScanBasicSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutApplicationScanBasicSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDiagnosisDataSource provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutDiagnosisDataSource(ctx context.Context, in *diagnosis.PutDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*diagnosis.PutDiagnosisDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDiagnosisDataSource")
	}

	var r0 *diagnosis.PutDiagnosisDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutDiagnosisDataSourceRequest, ...grpc.CallOption) (*diagnosis.PutDiagnosisDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutDiagnosisDataSourceRequest, ...grpc.CallOption) *diagnosis.PutDiagnosisDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutDiagnosisDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutDiagnosisDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPortscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutPortscanSetting(ctx context.Context, in *diagnosis.PutPortscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.PutPortscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPortscanSetting")
	}

	var r0 *diagnosis.PutPortscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutPortscanSettingRequest, ...grpc.CallOption) (*diagnosis.PutPortscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutPortscanSettingRequest, ...grpc.CallOption) *diagnosis.PutPortscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutPortscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutPortscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPortscanTarget provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutPortscanTarget(ctx context.Context, in *diagnosis.PutPortscanTargetRequest, opts ...grpc.CallOption) (*diagnosis.PutPortscanTargetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPortscanTarget")
	}

	var r0 *diagnosis.PutPortscanTargetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutPortscanTargetRequest, ...grpc.CallOption) (*diagnosis.PutPortscanTargetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutPortscanTargetRequest, ...grpc.CallOption) *diagnosis.PutPortscanTargetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutPortscanTargetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutPortscanTargetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutWpscanSetting provides a mock function with given fields: ctx, in, opts
func (_m *DiagnosisServiceClient) PutWpscanSetting(ctx context.Context, in *diagnosis.PutWpscanSettingRequest, opts ...grpc.CallOption) (*diagnosis.PutWpscanSettingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutWpscanSetting")
	}

	var r0 *diagnosis.PutWpscanSettingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutWpscanSettingRequest, ...grpc.CallOption) (*diagnosis.PutWpscanSettingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diagnosis.PutWpscanSettingRequest, ...grpc.CallOption) *diagnosis.PutWpscanSettingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diagnosis.PutWpscanSettingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diagnosis.PutWpscanSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDiagnosisServiceClient creates a new instance of DiagnosisServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiagnosisServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiagnosisServiceClient {
	mock := &DiagnosisServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
