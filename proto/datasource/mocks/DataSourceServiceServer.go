// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datasource "github.com/ca-risken/datasource-api/proto/datasource"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// DataSourceServiceServer is an autogenerated mock type for the DataSourceServiceServer type
type DataSourceServiceServer struct {
	mock.Mock
}

// AnalyzeAttackFlow provides a mock function with given fields: _a0, _a1
func (_m *DataSourceServiceServer) AnalyzeAttackFlow(_a0 context.Context, _a1 *datasource.AnalyzeAttackFlowRequest) (*datasource.AnalyzeAttackFlowResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *datasource.AnalyzeAttackFlowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasource.AnalyzeAttackFlowRequest) (*datasource.AnalyzeAttackFlowResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasource.AnalyzeAttackFlowRequest) *datasource.AnalyzeAttackFlowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasource.AnalyzeAttackFlowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasource.AnalyzeAttackFlowRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanDataSource provides a mock function with given fields: _a0, _a1
func (_m *DataSourceServiceServer) CleanDataSource(_a0 context.Context, _a1 *emptypb.Empty) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataSourceServiceServer creates a new instance of DataSourceServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataSourceServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataSourceServiceServer {
	mock := &DataSourceServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
