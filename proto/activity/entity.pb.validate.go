// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: activity/entity.proto

package activity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ARN with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *ARN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ARN with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ARNMultiError, or nil if none found.
func (m *ARN) ValidateAll() error {
	return m.validate(true)
}

func (m *ARN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Partition

	// no validation rules for Service

	// no validation rules for Region

	// no validation rules for AccountId

	// no validation rules for Resource

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ARNMultiError(errors)
	}

	return nil
}

// ARNMultiError is an error wrapping multiple validation errors returned by
// ARN.ValidateAll() if the designated constraints aren't met.
type ARNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ARNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ARNMultiError) AllErrors() []error { return m }

// ARNValidationError is the validation error returned by ARN.Validate if the
// designated constraints aren't met.
type ARNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ARNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ARNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ARNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ARNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ARNValidationError) ErrorName() string { return "ARNValidationError" }

// Error satisfies the builtin error interface
func (e ARNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sARN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ARNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ARNValidationError{}

// Validate checks the field values on CloudTrail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloudTrail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudTrail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloudTrailMultiError, or
// nil if none found.
func (m *CloudTrail) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudTrail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for EventName

	// no validation rules for ReadOnly

	// no validation rules for AccessKeyId

	// no validation rules for EventTime

	// no validation rules for EventSource

	// no validation rules for Username

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudTrailValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudTrailValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudTrailValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CloudtrailEvent

	if len(errors) > 0 {
		return CloudTrailMultiError(errors)
	}

	return nil
}

// CloudTrailMultiError is an error wrapping multiple validation errors
// returned by CloudTrail.ValidateAll() if the designated constraints aren't met.
type CloudTrailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudTrailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudTrailMultiError) AllErrors() []error { return m }

// CloudTrailValidationError is the validation error returned by
// CloudTrail.Validate if the designated constraints aren't met.
type CloudTrailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudTrailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudTrailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudTrailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudTrailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudTrailValidationError) ErrorName() string { return "CloudTrailValidationError" }

// Error satisfies the builtin error interface
func (e CloudTrailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudTrail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudTrailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudTrailValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	// no validation rules for ResourceId

	// no validation rules for RelationshipName

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Configuration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configuration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigurationMultiError, or
// nil if none found.
func (m *Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for AccountId

	// no validation rules for ConfigurationItemCaptureTime

	// no validation rules for ConfigurationItemStatus

	// no validation rules for ConfigurationStateId

	// no validation rules for ConfigurationItemMD5Hash

	// no validation rules for Arn

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for ResourceName

	// no validation rules for AwsRegion

	// no validation rules for AvailabilityZone

	// no validation rules for ResourceCreationTime

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRelationships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Relationships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("Relationships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Configuration

	for idx, item := range m.GetSupplementaryConfiguration() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("SupplementaryConfiguration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("SupplementaryConfiguration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("SupplementaryConfiguration[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigurationMultiError(errors)
	}

	return nil
}

// ConfigurationMultiError is an error wrapping multiple validation errors
// returned by Configuration.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationMultiError) AllErrors() []error { return m }

// ConfigurationValidationError is the validation error returned by
// Configuration.Validate if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on SupplementaryConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SupplementaryConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SupplementaryConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SupplementaryConfigurationMultiError, or nil if none found.
func (m *SupplementaryConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *SupplementaryConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return SupplementaryConfigurationMultiError(errors)
	}

	return nil
}

// SupplementaryConfigurationMultiError is an error wrapping multiple
// validation errors returned by SupplementaryConfiguration.ValidateAll() if
// the designated constraints aren't met.
type SupplementaryConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplementaryConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplementaryConfigurationMultiError) AllErrors() []error { return m }

// SupplementaryConfigurationValidationError is the validation error returned
// by SupplementaryConfiguration.Validate if the designated constraints aren't met.
type SupplementaryConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplementaryConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplementaryConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplementaryConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplementaryConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplementaryConfigurationValidationError) ErrorName() string {
	return "SupplementaryConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e SupplementaryConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplementaryConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplementaryConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplementaryConfigurationValidationError{}
