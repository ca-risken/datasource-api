// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: activity/service.proto

package activity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DescribeARNRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeARNRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeARNRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeARNRequestMultiError, or nil if none found.
func (m *DescribeARNRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeARNRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DescribeARNRequest_Arn_Pattern.MatchString(m.GetArn()) {
		err := DescribeARNRequestValidationError{
			field:  "Arn",
			reason: "value does not match regex pattern \"^arn:.*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeARNRequestMultiError(errors)
	}

	return nil
}

// DescribeARNRequestMultiError is an error wrapping multiple validation errors
// returned by DescribeARNRequest.ValidateAll() if the designated constraints
// aren't met.
type DescribeARNRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeARNRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeARNRequestMultiError) AllErrors() []error { return m }

// DescribeARNRequestValidationError is the validation error returned by
// DescribeARNRequest.Validate if the designated constraints aren't met.
type DescribeARNRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeARNRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeARNRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeARNRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeARNRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeARNRequestValidationError) ErrorName() string {
	return "DescribeARNRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeARNRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeARNRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeARNRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeARNRequestValidationError{}

var _DescribeARNRequest_Arn_Pattern = regexp.MustCompile("^arn:.*$")

// Validate checks the field values on DescribeARNResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeARNResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeARNResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeARNResponseMultiError, or nil if none found.
func (m *DescribeARNResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeARNResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeARNResponseValidationError{
					field:  "Arn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeARNResponseValidationError{
					field:  "Arn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeARNResponseValidationError{
				field:  "Arn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeARNResponseMultiError(errors)
	}

	return nil
}

// DescribeARNResponseMultiError is an error wrapping multiple validation
// errors returned by DescribeARNResponse.ValidateAll() if the designated
// constraints aren't met.
type DescribeARNResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeARNResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeARNResponseMultiError) AllErrors() []error { return m }

// DescribeARNResponseValidationError is the validation error returned by
// DescribeARNResponse.Validate if the designated constraints aren't met.
type DescribeARNResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeARNResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeARNResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeARNResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeARNResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeARNResponseValidationError) ErrorName() string {
	return "DescribeARNResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeARNResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeARNResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeARNResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeARNResponseValidationError{}

// Validate checks the field values on ListCloudTrailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudTrailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudTrailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudTrailRequestMultiError, or nil if none found.
func (m *ListCloudTrailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudTrailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ListCloudTrailRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAwsId() <= 0 {
		err := ListCloudTrailRequestValidationError{
			field:  "AwsId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := ListCloudTrailRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetStartTime(); val < 0 || val > 253402268399 {
		err := ListCloudTrailRequestValidationError{
			field:  "StartTime",
			reason: "value must be inside range [0, 253402268399]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetEndTime(); val < 0 || val > 253402268399 {
		err := ListCloudTrailRequestValidationError{
			field:  "EndTime",
			reason: "value must be inside range [0, 253402268399]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AttributeKey

	// no validation rules for AttributeValue

	// no validation rules for NextToken

	if len(errors) > 0 {
		return ListCloudTrailRequestMultiError(errors)
	}

	return nil
}

// ListCloudTrailRequestMultiError is an error wrapping multiple validation
// errors returned by ListCloudTrailRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCloudTrailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudTrailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudTrailRequestMultiError) AllErrors() []error { return m }

// ListCloudTrailRequestValidationError is the validation error returned by
// ListCloudTrailRequest.Validate if the designated constraints aren't met.
type ListCloudTrailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudTrailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudTrailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudTrailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudTrailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudTrailRequestValidationError) ErrorName() string {
	return "ListCloudTrailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudTrailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudTrailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudTrailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudTrailRequestValidationError{}

// Validate checks the field values on ListCloudTrailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudTrailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudTrailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudTrailResponseMultiError, or nil if none found.
func (m *ListCloudTrailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudTrailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCloudtrail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudTrailResponseValidationError{
						field:  fmt.Sprintf("Cloudtrail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudTrailResponseValidationError{
						field:  fmt.Sprintf("Cloudtrail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudTrailResponseValidationError{
					field:  fmt.Sprintf("Cloudtrail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextToken

	if len(errors) > 0 {
		return ListCloudTrailResponseMultiError(errors)
	}

	return nil
}

// ListCloudTrailResponseMultiError is an error wrapping multiple validation
// errors returned by ListCloudTrailResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCloudTrailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudTrailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudTrailResponseMultiError) AllErrors() []error { return m }

// ListCloudTrailResponseValidationError is the validation error returned by
// ListCloudTrailResponse.Validate if the designated constraints aren't met.
type ListCloudTrailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudTrailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudTrailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudTrailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudTrailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudTrailResponseValidationError) ErrorName() string {
	return "ListCloudTrailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudTrailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudTrailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudTrailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudTrailResponseValidationError{}

// Validate checks the field values on ListConfigHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigHistoryRequestMultiError, or nil if none found.
func (m *ListConfigHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ListConfigHistoryRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAwsId() <= 0 {
		err := ListConfigHistoryRequestValidationError{
			field:  "AwsId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := ListConfigHistoryRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResourceType()) < 1 {
		err := ListConfigHistoryRequestValidationError{
			field:  "ResourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResourceId()) < 1 {
		err := ListConfigHistoryRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLaterTime(); val < 0 || val > 253402268399 {
		err := ListConfigHistoryRequestValidationError{
			field:  "LaterTime",
			reason: "value must be inside range [0, 253402268399]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetEarlierTime(); val < 0 || val > 253402268399 {
		err := ListConfigHistoryRequestValidationError{
			field:  "EarlierTime",
			reason: "value must be inside range [0, 253402268399]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListConfigHistoryRequest_ChronologicalOrder_InLookup[m.GetChronologicalOrder()]; !ok {
		err := ListConfigHistoryRequestValidationError{
			field:  "ChronologicalOrder",
			reason: "value must be in list [Reverse Forward ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartingToken

	if len(errors) > 0 {
		return ListConfigHistoryRequestMultiError(errors)
	}

	return nil
}

// ListConfigHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListConfigHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConfigHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigHistoryRequestMultiError) AllErrors() []error { return m }

// ListConfigHistoryRequestValidationError is the validation error returned by
// ListConfigHistoryRequest.Validate if the designated constraints aren't met.
type ListConfigHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigHistoryRequestValidationError) ErrorName() string {
	return "ListConfigHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigHistoryRequestValidationError{}

var _ListConfigHistoryRequest_ChronologicalOrder_InLookup = map[string]struct{}{
	"Reverse": {},
	"Forward": {},
	"":        {},
}

// Validate checks the field values on ListConfigHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConfigHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConfigHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConfigHistoryResponseMultiError, or nil if none found.
func (m *ListConfigHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConfigHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfiguration() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConfigHistoryResponseValidationError{
						field:  fmt.Sprintf("Configuration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConfigHistoryResponseValidationError{
						field:  fmt.Sprintf("Configuration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConfigHistoryResponseValidationError{
					field:  fmt.Sprintf("Configuration[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextToken

	if len(errors) > 0 {
		return ListConfigHistoryResponseMultiError(errors)
	}

	return nil
}

// ListConfigHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by ListConfigHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type ListConfigHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConfigHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConfigHistoryResponseMultiError) AllErrors() []error { return m }

// ListConfigHistoryResponseValidationError is the validation error returned by
// ListConfigHistoryResponse.Validate if the designated constraints aren't met.
type ListConfigHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConfigHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConfigHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConfigHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConfigHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConfigHistoryResponseValidationError) ErrorName() string {
	return "ListConfigHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConfigHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConfigHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConfigHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConfigHistoryResponseValidationError{}
