// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/ca-risken/datasource-api/proto/aws"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AWSServiceServer is an autogenerated mock type for the AWSServiceServer type
type AWSServiceServer struct {
	mock.Mock
}

// AttachDataSource provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) AttachDataSource(_a0 context.Context, _a1 *aws.AttachDataSourceRequest) (*aws.AttachDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.AttachDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.AttachDataSourceRequest) *aws.AttachDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.AttachDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.AttachDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAWS provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) DeleteAWS(_a0 context.Context, _a1 *aws.DeleteAWSRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DeleteAWSRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.DeleteAWSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDataSource provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) DetachDataSource(_a0 context.Context, _a1 *aws.DetachDataSourceRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DetachDataSourceRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.DetachDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScan provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) InvokeScan(_a0 context.Context, _a1 *aws.InvokeScanRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.InvokeScanRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.InvokeScanRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) InvokeScanAll(_a0 context.Context, _a1 *aws.InvokeScanAllRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.InvokeScanAllRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.InvokeScanAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWS provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) ListAWS(_a0 context.Context, _a1 *aws.ListAWSRequest) (*aws.ListAWSResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.ListAWSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.ListAWSRequest) *aws.ListAWSResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.ListAWSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.ListAWSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSource provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) ListDataSource(_a0 context.Context, _a1 *aws.ListDataSourceRequest) (*aws.ListDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.ListDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.ListDataSourceRequest) *aws.ListDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.ListDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.ListDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAWS provides a mock function with given fields: _a0, _a1
func (_m *AWSServiceServer) PutAWS(_a0 context.Context, _a1 *aws.PutAWSRequest) (*aws.PutAWSResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *aws.PutAWSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.PutAWSRequest) *aws.PutAWSResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.PutAWSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.PutAWSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAWSServiceServer creates a new instance of AWSServiceServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAWSServiceServer(t testing.TB) *AWSServiceServer {
	mock := &AWSServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
