// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/ca-risken/datasource-api/proto/aws"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AWSServiceClient is an autogenerated mock type for the AWSServiceClient type
type AWSServiceClient struct {
	mock.Mock
}

// AttachDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) AttachDataSource(ctx context.Context, in *aws.AttachDataSourceRequest, opts ...grpc.CallOption) (*aws.AttachDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *aws.AttachDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.AttachDataSourceRequest, ...grpc.CallOption) *aws.AttachDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.AttachDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.AttachDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAWS provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) DeleteAWS(ctx context.Context, in *aws.DeleteAWSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DeleteAWSRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.DeleteAWSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) DetachDataSource(ctx context.Context, in *aws.DetachDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.DetachDataSourceRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.DetachDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScan provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) InvokeScan(ctx context.Context, in *aws.InvokeScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.InvokeScanRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.InvokeScanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) InvokeScanAll(ctx context.Context, in *aws.InvokeScanAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *aws.InvokeScanAllRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.InvokeScanAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWS provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) ListAWS(ctx context.Context, in *aws.ListAWSRequest, opts ...grpc.CallOption) (*aws.ListAWSResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *aws.ListAWSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.ListAWSRequest, ...grpc.CallOption) *aws.ListAWSResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.ListAWSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.ListAWSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) ListDataSource(ctx context.Context, in *aws.ListDataSourceRequest, opts ...grpc.CallOption) (*aws.ListDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *aws.ListDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.ListDataSourceRequest, ...grpc.CallOption) *aws.ListDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.ListDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.ListDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAWS provides a mock function with given fields: ctx, in, opts
func (_m *AWSServiceClient) PutAWS(ctx context.Context, in *aws.PutAWSRequest, opts ...grpc.CallOption) (*aws.PutAWSResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *aws.PutAWSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *aws.PutAWSRequest, ...grpc.CallOption) *aws.PutAWSResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aws.PutAWSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *aws.PutAWSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAWSServiceClient creates a new instance of AWSServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAWSServiceClient(t testing.TB) *AWSServiceClient {
	mock := &AWSServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
