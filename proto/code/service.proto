syntax = "proto3";

package code.code;
option go_package = "github.com/ca-risken/datasource-api/proto/code";

import "google/protobuf/empty.proto";
import "code/entity.proto";

service CodeService {
  // Code DataSource
  rpc ListDataSource(ListDataSourceRequest) returns (ListDataSourceResponse);

  // Gitleaks
  rpc ListGitleaks(ListGitleaksRequest) returns (ListGitleaksResponse);
  rpc GetGitleaks(GetGitleaksRequest) returns (GetGitleaksResponse);
  rpc PutGitleaks(PutGitleaksRequest) returns (PutGitleaksResponse);
  rpc DeleteGitleaks(DeleteGitleaksRequest) returns (google.protobuf.Empty);

  // Enterprise
  rpc ListEnterpriseOrg(ListEnterpriseOrgRequest)
      returns (ListEnterpriseOrgResponse);
  rpc PutEnterpriseOrg(PutEnterpriseOrgRequest)
      returns (PutEnterpriseOrgResponse);
  rpc DeleteEnterpriseOrg(DeleteEnterpriseOrgRequest)
      returns (google.protobuf.Empty);

  // Scan
  rpc InvokeScanGitleaks(InvokeScanGitleaksRequest)
      returns (google.protobuf.Empty); // For ondeamnd
  rpc InvokeScanAllGitleaks(google.protobuf.Empty)
      returns (google.protobuf.Empty); // For scheduled
}

message ListDataSourceRequest {
  uint32 code_data_source_id = 1;
  string name = 2;
}

message ListDataSourceResponse { repeated CodeDataSource code_data_source = 1; }

message ListGitleaksRequest {
  uint32 project_id = 1;
  uint32 code_data_source_id = 2;
  uint32 gitleaks_id = 3;
}

message ListGitleaksResponse { repeated Gitleaks gitleaks = 1; }

message GetGitleaksRequest {
  uint32 project_id = 1;
  uint32 gitleaks_id = 2;
}

message GetGitleaksResponse { Gitleaks gitleaks = 1; }

message PutGitleaksRequest {
  uint32 project_id = 1;
  GitleaksForUpsert gitleaks = 2;
}

message PutGitleaksResponse { Gitleaks gitleaks = 1; }

message DeleteGitleaksRequest {
  uint32 project_id = 1;
  uint32 gitleaks_id = 2;
}

message ListEnterpriseOrgRequest {
  uint32 project_id = 1;
  uint32 gitleaks_id = 2;
}

message ListEnterpriseOrgResponse { repeated EnterpriseOrg enterprise_org = 1; }

message PutEnterpriseOrgRequest {
  uint32 project_id = 1;
  EnterpriseOrgForUpsert enterprise_org = 2;
}

message PutEnterpriseOrgResponse { EnterpriseOrg enterprise_org = 1; }

message DeleteEnterpriseOrgRequest {
  uint32 project_id = 1;
  uint32 gitleaks_id = 2;
  string login = 3;
}

message InvokeScanGitleaksRequest {
  uint32 project_id = 1;
  uint32 gitleaks_id = 2;
  bool scan_only = 3;
}
