// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: code/service.proto

package code

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDataSourceId uint32 `protobuf:"varint,1,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDataSourceRequest) Reset() {
	*x = ListDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourceRequest) ProtoMessage() {}

func (x *ListDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourceRequest.ProtoReflect.Descriptor instead.
func (*ListDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListDataSourceRequest) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *ListDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDataSource []*CodeDataSource `protobuf:"bytes,1,rep,name=code_data_source,json=codeDataSource,proto3" json:"code_data_source,omitempty"`
}

func (x *ListDataSourceResponse) Reset() {
	*x = ListDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourceResponse) ProtoMessage() {}

func (x *ListDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourceResponse.ProtoReflect.Descriptor instead.
func (*ListDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDataSourceResponse) GetCodeDataSource() []*CodeDataSource {
	if x != nil {
		return x.CodeDataSource
	}
	return nil
}

type ListGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *ListGitHubSettingRequest) Reset() {
	*x = ListGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubSettingRequest) ProtoMessage() {}

func (x *ListGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*ListGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting []*GitHubSetting `protobuf:"bytes,1,rep,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *ListGitHubSettingResponse) Reset() {
	*x = ListGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubSettingResponse) ProtoMessage() {}

func (x *ListGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*ListGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListGitHubSettingResponse) GetGithubSetting() []*GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type GetGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *GetGitHubSettingRequest) Reset() {
	*x = GetGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitHubSettingRequest) ProtoMessage() {}

func (x *GetGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*GetGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type GetGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting *GitHubSetting `protobuf:"bytes,1,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *GetGitHubSettingResponse) Reset() {
	*x = GetGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitHubSettingResponse) ProtoMessage() {}

func (x *GetGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*GetGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetGitHubSettingResponse) GetGithubSetting() *GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type PutGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32                  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSetting *GitHubSettingForUpsert `protobuf:"bytes,2,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *PutGitHubSettingRequest) Reset() {
	*x = PutGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubSettingRequest) ProtoMessage() {}

func (x *PutGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*PutGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{6}
}

func (x *PutGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitHubSettingRequest) GetGithubSetting() *GitHubSettingForUpsert {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type PutGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting *GitHubSetting `protobuf:"bytes,1,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *PutGitHubSettingResponse) Reset() {
	*x = PutGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubSettingResponse) ProtoMessage() {}

func (x *PutGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*PutGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{7}
}

func (x *PutGitHubSettingResponse) GetGithubSetting() *GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type DeleteGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteGitHubSettingRequest) Reset() {
	*x = DeleteGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitHubSettingRequest) ProtoMessage() {}

func (x *DeleteGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type PutGitleaksSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32                    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GitleaksSetting *GitleaksSettingForUpsert `protobuf:"bytes,2,opt,name=gitleaks_setting,json=gitleaksSetting,proto3" json:"gitleaks_setting,omitempty"`
}

func (x *PutGitleaksSettingRequest) Reset() {
	*x = PutGitleaksSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksSettingRequest) ProtoMessage() {}

func (x *PutGitleaksSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksSettingRequest.ProtoReflect.Descriptor instead.
func (*PutGitleaksSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{9}
}

func (x *PutGitleaksSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitleaksSettingRequest) GetGitleaksSetting() *GitleaksSettingForUpsert {
	if x != nil {
		return x.GitleaksSetting
	}
	return nil
}

type PutGitleaksSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitleaksSetting *GitleaksSetting `protobuf:"bytes,1,opt,name=gitleaks_setting,json=gitleaksSetting,proto3" json:"gitleaks_setting,omitempty"`
}

func (x *PutGitleaksSettingResponse) Reset() {
	*x = PutGitleaksSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksSettingResponse) ProtoMessage() {}

func (x *PutGitleaksSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksSettingResponse.ProtoReflect.Descriptor instead.
func (*PutGitleaksSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{10}
}

func (x *PutGitleaksSettingResponse) GetGitleaksSetting() *GitleaksSetting {
	if x != nil {
		return x.GitleaksSetting
	}
	return nil
}

type DeleteGitleaksSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteGitleaksSettingRequest) Reset() {
	*x = DeleteGitleaksSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitleaksSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitleaksSettingRequest) ProtoMessage() {}

func (x *DeleteGitleaksSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitleaksSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitleaksSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteGitleaksSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteGitleaksSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitHubEnterpriseOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *ListGitHubEnterpriseOrgRequest) Reset() {
	*x = ListGitHubEnterpriseOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubEnterpriseOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubEnterpriseOrgRequest) ProtoMessage() {}

func (x *ListGitHubEnterpriseOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubEnterpriseOrgRequest.ProtoReflect.Descriptor instead.
func (*ListGitHubEnterpriseOrgRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListGitHubEnterpriseOrgRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListGitHubEnterpriseOrgRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitHubEnterpriseOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubEnterpriseOrg []*GitHubEnterpriseOrg `protobuf:"bytes,1,rep,name=github_enterprise_org,json=githubEnterpriseOrg,proto3" json:"github_enterprise_org,omitempty"`
}

func (x *ListGitHubEnterpriseOrgResponse) Reset() {
	*x = ListGitHubEnterpriseOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubEnterpriseOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubEnterpriseOrgResponse) ProtoMessage() {}

func (x *ListGitHubEnterpriseOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubEnterpriseOrgResponse.ProtoReflect.Descriptor instead.
func (*ListGitHubEnterpriseOrgResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListGitHubEnterpriseOrgResponse) GetGithubEnterpriseOrg() []*GitHubEnterpriseOrg {
	if x != nil {
		return x.GithubEnterpriseOrg
	}
	return nil
}

type PutGitHubEnterpriseOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId           uint32                        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubEnterpriseOrg *GitHubEnterpriseOrgForUpsert `protobuf:"bytes,2,opt,name=github_enterprise_org,json=githubEnterpriseOrg,proto3" json:"github_enterprise_org,omitempty"`
}

func (x *PutGitHubEnterpriseOrgRequest) Reset() {
	*x = PutGitHubEnterpriseOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubEnterpriseOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubEnterpriseOrgRequest) ProtoMessage() {}

func (x *PutGitHubEnterpriseOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubEnterpriseOrgRequest.ProtoReflect.Descriptor instead.
func (*PutGitHubEnterpriseOrgRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{14}
}

func (x *PutGitHubEnterpriseOrgRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitHubEnterpriseOrgRequest) GetGithubEnterpriseOrg() *GitHubEnterpriseOrgForUpsert {
	if x != nil {
		return x.GithubEnterpriseOrg
	}
	return nil
}

type PutGitHubEnterpriseOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubEnterpriseOrg *GitHubEnterpriseOrg `protobuf:"bytes,1,opt,name=github_enterprise_org,json=githubEnterpriseOrg,proto3" json:"github_enterprise_org,omitempty"`
}

func (x *PutGitHubEnterpriseOrgResponse) Reset() {
	*x = PutGitHubEnterpriseOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubEnterpriseOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubEnterpriseOrgResponse) ProtoMessage() {}

func (x *PutGitHubEnterpriseOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubEnterpriseOrgResponse.ProtoReflect.Descriptor instead.
func (*PutGitHubEnterpriseOrgResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{15}
}

func (x *PutGitHubEnterpriseOrgResponse) GetGithubEnterpriseOrg() *GitHubEnterpriseOrg {
	if x != nil {
		return x.GithubEnterpriseOrg
	}
	return nil
}

type DeleteGitHubEnterpriseOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	Organization    string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *DeleteGitHubEnterpriseOrgRequest) Reset() {
	*x = DeleteGitHubEnterpriseOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitHubEnterpriseOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitHubEnterpriseOrgRequest) ProtoMessage() {}

func (x *DeleteGitHubEnterpriseOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitHubEnterpriseOrgRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitHubEnterpriseOrgRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteGitHubEnterpriseOrgRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteGitHubEnterpriseOrgRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *DeleteGitHubEnterpriseOrgRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type InvokeScanGitleaksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ScanOnly        bool   `protobuf:"varint,3,opt,name=scan_only,json=scanOnly,proto3" json:"scan_only,omitempty"`
}

func (x *InvokeScanGitleaksRequest) Reset() {
	*x = InvokeScanGitleaksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanGitleaksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanGitleaksRequest) ProtoMessage() {}

func (x *InvokeScanGitleaksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanGitleaksRequest.ProtoReflect.Descriptor instead.
func (*InvokeScanGitleaksRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{17}
}

func (x *InvokeScanGitleaksRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvokeScanGitleaksRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *InvokeScanGitleaksRequest) GetScanOnly() bool {
	if x != nil {
		return x.ScanOnly
	}
	return false
}

var File_code_service_proto protoreflect.FileDescriptor

var file_code_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x63, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x50,
	0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x67, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65,
	0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65,
	0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x69, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52,
	0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x4f, 0x72, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x15, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x22, 0x7a, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52,
	0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x4f, 0x72, 0x67, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x32, 0xdd,
	0x09, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x12, 0x50,
	0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c,
	0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f,
	0x72, 0x67, 0x12, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67,
	0x12, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x47, 0x69,
	0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x2d,
	0x72, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_code_service_proto_rawDescOnce sync.Once
	file_code_service_proto_rawDescData = file_code_service_proto_rawDesc
)

func file_code_service_proto_rawDescGZIP() []byte {
	file_code_service_proto_rawDescOnce.Do(func() {
		file_code_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_code_service_proto_rawDescData)
	})
	return file_code_service_proto_rawDescData
}

var file_code_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_code_service_proto_goTypes = []interface{}{
	(*ListDataSourceRequest)(nil),            // 0: datasource.code.ListDataSourceRequest
	(*ListDataSourceResponse)(nil),           // 1: datasource.code.ListDataSourceResponse
	(*ListGitHubSettingRequest)(nil),         // 2: datasource.code.ListGitHubSettingRequest
	(*ListGitHubSettingResponse)(nil),        // 3: datasource.code.ListGitHubSettingResponse
	(*GetGitHubSettingRequest)(nil),          // 4: datasource.code.GetGitHubSettingRequest
	(*GetGitHubSettingResponse)(nil),         // 5: datasource.code.GetGitHubSettingResponse
	(*PutGitHubSettingRequest)(nil),          // 6: datasource.code.PutGitHubSettingRequest
	(*PutGitHubSettingResponse)(nil),         // 7: datasource.code.PutGitHubSettingResponse
	(*DeleteGitHubSettingRequest)(nil),       // 8: datasource.code.DeleteGitHubSettingRequest
	(*PutGitleaksSettingRequest)(nil),        // 9: datasource.code.PutGitleaksSettingRequest
	(*PutGitleaksSettingResponse)(nil),       // 10: datasource.code.PutGitleaksSettingResponse
	(*DeleteGitleaksSettingRequest)(nil),     // 11: datasource.code.DeleteGitleaksSettingRequest
	(*ListGitHubEnterpriseOrgRequest)(nil),   // 12: datasource.code.ListGitHubEnterpriseOrgRequest
	(*ListGitHubEnterpriseOrgResponse)(nil),  // 13: datasource.code.ListGitHubEnterpriseOrgResponse
	(*PutGitHubEnterpriseOrgRequest)(nil),    // 14: datasource.code.PutGitHubEnterpriseOrgRequest
	(*PutGitHubEnterpriseOrgResponse)(nil),   // 15: datasource.code.PutGitHubEnterpriseOrgResponse
	(*DeleteGitHubEnterpriseOrgRequest)(nil), // 16: datasource.code.DeleteGitHubEnterpriseOrgRequest
	(*InvokeScanGitleaksRequest)(nil),        // 17: datasource.code.InvokeScanGitleaksRequest
	(*CodeDataSource)(nil),                   // 18: datasource.code.CodeDataSource
	(*GitHubSetting)(nil),                    // 19: datasource.code.GitHubSetting
	(*GitHubSettingForUpsert)(nil),           // 20: datasource.code.GitHubSettingForUpsert
	(*GitleaksSettingForUpsert)(nil),         // 21: datasource.code.GitleaksSettingForUpsert
	(*GitleaksSetting)(nil),                  // 22: datasource.code.GitleaksSetting
	(*GitHubEnterpriseOrg)(nil),              // 23: datasource.code.GitHubEnterpriseOrg
	(*GitHubEnterpriseOrgForUpsert)(nil),     // 24: datasource.code.GitHubEnterpriseOrgForUpsert
	(*emptypb.Empty)(nil),                    // 25: google.protobuf.Empty
}
var file_code_service_proto_depIdxs = []int32{
	18, // 0: datasource.code.ListDataSourceResponse.code_data_source:type_name -> datasource.code.CodeDataSource
	19, // 1: datasource.code.ListGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	19, // 2: datasource.code.GetGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	20, // 3: datasource.code.PutGitHubSettingRequest.github_setting:type_name -> datasource.code.GitHubSettingForUpsert
	19, // 4: datasource.code.PutGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	21, // 5: datasource.code.PutGitleaksSettingRequest.gitleaks_setting:type_name -> datasource.code.GitleaksSettingForUpsert
	22, // 6: datasource.code.PutGitleaksSettingResponse.gitleaks_setting:type_name -> datasource.code.GitleaksSetting
	23, // 7: datasource.code.ListGitHubEnterpriseOrgResponse.github_enterprise_org:type_name -> datasource.code.GitHubEnterpriseOrg
	24, // 8: datasource.code.PutGitHubEnterpriseOrgRequest.github_enterprise_org:type_name -> datasource.code.GitHubEnterpriseOrgForUpsert
	23, // 9: datasource.code.PutGitHubEnterpriseOrgResponse.github_enterprise_org:type_name -> datasource.code.GitHubEnterpriseOrg
	0,  // 10: datasource.code.CodeService.ListDataSource:input_type -> datasource.code.ListDataSourceRequest
	2,  // 11: datasource.code.CodeService.ListGitHubSetting:input_type -> datasource.code.ListGitHubSettingRequest
	4,  // 12: datasource.code.CodeService.GetGitHubSetting:input_type -> datasource.code.GetGitHubSettingRequest
	6,  // 13: datasource.code.CodeService.PutGitHubSetting:input_type -> datasource.code.PutGitHubSettingRequest
	8,  // 14: datasource.code.CodeService.DeleteGitHubSetting:input_type -> datasource.code.DeleteGitHubSettingRequest
	9,  // 15: datasource.code.CodeService.PutGitleaksSetting:input_type -> datasource.code.PutGitleaksSettingRequest
	11, // 16: datasource.code.CodeService.DeleteGitleaksSetting:input_type -> datasource.code.DeleteGitleaksSettingRequest
	12, // 17: datasource.code.CodeService.ListGitHubEnterpriseOrg:input_type -> datasource.code.ListGitHubEnterpriseOrgRequest
	14, // 18: datasource.code.CodeService.PutGitHubEnterpriseOrg:input_type -> datasource.code.PutGitHubEnterpriseOrgRequest
	16, // 19: datasource.code.CodeService.DeleteGitHubEnterpriseOrg:input_type -> datasource.code.DeleteGitHubEnterpriseOrgRequest
	17, // 20: datasource.code.CodeService.InvokeScanGitleaks:input_type -> datasource.code.InvokeScanGitleaksRequest
	25, // 21: datasource.code.CodeService.InvokeScanAllGitleaks:input_type -> google.protobuf.Empty
	1,  // 22: datasource.code.CodeService.ListDataSource:output_type -> datasource.code.ListDataSourceResponse
	3,  // 23: datasource.code.CodeService.ListGitHubSetting:output_type -> datasource.code.ListGitHubSettingResponse
	5,  // 24: datasource.code.CodeService.GetGitHubSetting:output_type -> datasource.code.GetGitHubSettingResponse
	7,  // 25: datasource.code.CodeService.PutGitHubSetting:output_type -> datasource.code.PutGitHubSettingResponse
	25, // 26: datasource.code.CodeService.DeleteGitHubSetting:output_type -> google.protobuf.Empty
	10, // 27: datasource.code.CodeService.PutGitleaksSetting:output_type -> datasource.code.PutGitleaksSettingResponse
	25, // 28: datasource.code.CodeService.DeleteGitleaksSetting:output_type -> google.protobuf.Empty
	13, // 29: datasource.code.CodeService.ListGitHubEnterpriseOrg:output_type -> datasource.code.ListGitHubEnterpriseOrgResponse
	15, // 30: datasource.code.CodeService.PutGitHubEnterpriseOrg:output_type -> datasource.code.PutGitHubEnterpriseOrgResponse
	25, // 31: datasource.code.CodeService.DeleteGitHubEnterpriseOrg:output_type -> google.protobuf.Empty
	25, // 32: datasource.code.CodeService.InvokeScanGitleaks:output_type -> google.protobuf.Empty
	25, // 33: datasource.code.CodeService.InvokeScanAllGitleaks:output_type -> google.protobuf.Empty
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_code_service_proto_init() }
func file_code_service_proto_init() {
	if File_code_service_proto != nil {
		return
	}
	file_code_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_code_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitleaksSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubEnterpriseOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubEnterpriseOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubEnterpriseOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubEnterpriseOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitHubEnterpriseOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanGitleaksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_code_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_code_service_proto_goTypes,
		DependencyIndexes: file_code_service_proto_depIdxs,
		MessageInfos:      file_code_service_proto_msgTypes,
	}.Build()
	File_code_service_proto = out.File
	file_code_service_proto_rawDesc = nil
	file_code_service_proto_goTypes = nil
	file_code_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CodeServiceClient is the client API for CodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodeServiceClient interface {
	// Code DataSource
	ListDataSource(ctx context.Context, in *ListDataSourceRequest, opts ...grpc.CallOption) (*ListDataSourceResponse, error)
	// GitHubSetting
	ListGitHubSetting(ctx context.Context, in *ListGitHubSettingRequest, opts ...grpc.CallOption) (*ListGitHubSettingResponse, error)
	GetGitHubSetting(ctx context.Context, in *GetGitHubSettingRequest, opts ...grpc.CallOption) (*GetGitHubSettingResponse, error)
	PutGitHubSetting(ctx context.Context, in *PutGitHubSettingRequest, opts ...grpc.CallOption) (*PutGitHubSettingResponse, error)
	DeleteGitHubSetting(ctx context.Context, in *DeleteGitHubSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GitleaksSetting
	PutGitleaksSetting(ctx context.Context, in *PutGitleaksSettingRequest, opts ...grpc.CallOption) (*PutGitleaksSettingResponse, error)
	DeleteGitleaksSetting(ctx context.Context, in *DeleteGitleaksSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Enterprise
	ListGitHubEnterpriseOrg(ctx context.Context, in *ListGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*ListGitHubEnterpriseOrgResponse, error)
	PutGitHubEnterpriseOrg(ctx context.Context, in *PutGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*PutGitHubEnterpriseOrgResponse, error)
	DeleteGitHubEnterpriseOrg(ctx context.Context, in *DeleteGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Scan
	InvokeScanGitleaks(ctx context.Context, in *InvokeScanGitleaksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvokeScanAllGitleaks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type codeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeServiceClient(cc grpc.ClientConnInterface) CodeServiceClient {
	return &codeServiceClient{cc}
}

func (c *codeServiceClient) ListDataSource(ctx context.Context, in *ListDataSourceRequest, opts ...grpc.CallOption) (*ListDataSourceResponse, error) {
	out := new(ListDataSourceResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) ListGitHubSetting(ctx context.Context, in *ListGitHubSettingRequest, opts ...grpc.CallOption) (*ListGitHubSettingResponse, error) {
	out := new(ListGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) GetGitHubSetting(ctx context.Context, in *GetGitHubSettingRequest, opts ...grpc.CallOption) (*GetGitHubSettingResponse, error) {
	out := new(GetGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/GetGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitHubSetting(ctx context.Context, in *PutGitHubSettingRequest, opts ...grpc.CallOption) (*PutGitHubSettingResponse, error) {
	out := new(PutGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteGitHubSetting(ctx context.Context, in *DeleteGitHubSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitleaksSetting(ctx context.Context, in *PutGitleaksSettingRequest, opts ...grpc.CallOption) (*PutGitleaksSettingResponse, error) {
	out := new(PutGitleaksSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitleaksSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteGitleaksSetting(ctx context.Context, in *DeleteGitleaksSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteGitleaksSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) ListGitHubEnterpriseOrg(ctx context.Context, in *ListGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*ListGitHubEnterpriseOrgResponse, error) {
	out := new(ListGitHubEnterpriseOrgResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListGitHubEnterpriseOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitHubEnterpriseOrg(ctx context.Context, in *PutGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*PutGitHubEnterpriseOrgResponse, error) {
	out := new(PutGitHubEnterpriseOrgResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitHubEnterpriseOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteGitHubEnterpriseOrg(ctx context.Context, in *DeleteGitHubEnterpriseOrgRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteGitHubEnterpriseOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanGitleaks(ctx context.Context, in *InvokeScanGitleaksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanGitleaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanAllGitleaks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanAllGitleaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeServiceServer is the server API for CodeService service.
type CodeServiceServer interface {
	// Code DataSource
	ListDataSource(context.Context, *ListDataSourceRequest) (*ListDataSourceResponse, error)
	// GitHubSetting
	ListGitHubSetting(context.Context, *ListGitHubSettingRequest) (*ListGitHubSettingResponse, error)
	GetGitHubSetting(context.Context, *GetGitHubSettingRequest) (*GetGitHubSettingResponse, error)
	PutGitHubSetting(context.Context, *PutGitHubSettingRequest) (*PutGitHubSettingResponse, error)
	DeleteGitHubSetting(context.Context, *DeleteGitHubSettingRequest) (*emptypb.Empty, error)
	// GitleaksSetting
	PutGitleaksSetting(context.Context, *PutGitleaksSettingRequest) (*PutGitleaksSettingResponse, error)
	DeleteGitleaksSetting(context.Context, *DeleteGitleaksSettingRequest) (*emptypb.Empty, error)
	// Enterprise
	ListGitHubEnterpriseOrg(context.Context, *ListGitHubEnterpriseOrgRequest) (*ListGitHubEnterpriseOrgResponse, error)
	PutGitHubEnterpriseOrg(context.Context, *PutGitHubEnterpriseOrgRequest) (*PutGitHubEnterpriseOrgResponse, error)
	DeleteGitHubEnterpriseOrg(context.Context, *DeleteGitHubEnterpriseOrgRequest) (*emptypb.Empty, error)
	// Scan
	InvokeScanGitleaks(context.Context, *InvokeScanGitleaksRequest) (*emptypb.Empty, error)
	InvokeScanAllGitleaks(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedCodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCodeServiceServer struct {
}

func (*UnimplementedCodeServiceServer) ListDataSource(context.Context, *ListDataSourceRequest) (*ListDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSource not implemented")
}
func (*UnimplementedCodeServiceServer) ListGitHubSetting(context.Context, *ListGitHubSettingRequest) (*ListGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) GetGitHubSetting(context.Context, *GetGitHubSettingRequest) (*GetGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitHubSetting(context.Context, *PutGitHubSettingRequest) (*PutGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteGitHubSetting(context.Context, *DeleteGitHubSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitleaksSetting(context.Context, *PutGitleaksSettingRequest) (*PutGitleaksSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitleaksSetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteGitleaksSetting(context.Context, *DeleteGitleaksSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitleaksSetting not implemented")
}
func (*UnimplementedCodeServiceServer) ListGitHubEnterpriseOrg(context.Context, *ListGitHubEnterpriseOrgRequest) (*ListGitHubEnterpriseOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitHubEnterpriseOrg not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitHubEnterpriseOrg(context.Context, *PutGitHubEnterpriseOrgRequest) (*PutGitHubEnterpriseOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitHubEnterpriseOrg not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteGitHubEnterpriseOrg(context.Context, *DeleteGitHubEnterpriseOrgRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitHubEnterpriseOrg not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanGitleaks(context.Context, *InvokeScanGitleaksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanGitleaks not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanAllGitleaks(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanAllGitleaks not implemented")
}

func RegisterCodeServiceServer(s *grpc.Server, srv CodeServiceServer) {
	s.RegisterService(&_CodeService_serviceDesc, srv)
}

func _CodeService_ListDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListDataSource(ctx, req.(*ListDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_ListGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListGitHubSetting(ctx, req.(*ListGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_GetGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).GetGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/GetGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).GetGitHubSetting(ctx, req.(*GetGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitHubSetting(ctx, req.(*PutGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteGitHubSetting(ctx, req.(*DeleteGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitleaksSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitleaksSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitleaksSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitleaksSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitleaksSetting(ctx, req.(*PutGitleaksSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteGitleaksSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitleaksSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteGitleaksSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteGitleaksSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteGitleaksSetting(ctx, req.(*DeleteGitleaksSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_ListGitHubEnterpriseOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitHubEnterpriseOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListGitHubEnterpriseOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListGitHubEnterpriseOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListGitHubEnterpriseOrg(ctx, req.(*ListGitHubEnterpriseOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitHubEnterpriseOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitHubEnterpriseOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitHubEnterpriseOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitHubEnterpriseOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitHubEnterpriseOrg(ctx, req.(*PutGitHubEnterpriseOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteGitHubEnterpriseOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitHubEnterpriseOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteGitHubEnterpriseOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteGitHubEnterpriseOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteGitHubEnterpriseOrg(ctx, req.(*DeleteGitHubEnterpriseOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanGitleaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeScanGitleaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanGitleaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanGitleaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanGitleaks(ctx, req.(*InvokeScanGitleaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanAllGitleaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanAllGitleaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanAllGitleaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanAllGitleaks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasource.code.CodeService",
	HandlerType: (*CodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataSource",
			Handler:    _CodeService_ListDataSource_Handler,
		},
		{
			MethodName: "ListGitHubSetting",
			Handler:    _CodeService_ListGitHubSetting_Handler,
		},
		{
			MethodName: "GetGitHubSetting",
			Handler:    _CodeService_GetGitHubSetting_Handler,
		},
		{
			MethodName: "PutGitHubSetting",
			Handler:    _CodeService_PutGitHubSetting_Handler,
		},
		{
			MethodName: "DeleteGitHubSetting",
			Handler:    _CodeService_DeleteGitHubSetting_Handler,
		},
		{
			MethodName: "PutGitleaksSetting",
			Handler:    _CodeService_PutGitleaksSetting_Handler,
		},
		{
			MethodName: "DeleteGitleaksSetting",
			Handler:    _CodeService_DeleteGitleaksSetting_Handler,
		},
		{
			MethodName: "ListGitHubEnterpriseOrg",
			Handler:    _CodeService_ListGitHubEnterpriseOrg_Handler,
		},
		{
			MethodName: "PutGitHubEnterpriseOrg",
			Handler:    _CodeService_PutGitHubEnterpriseOrg_Handler,
		},
		{
			MethodName: "DeleteGitHubEnterpriseOrg",
			Handler:    _CodeService_DeleteGitHubEnterpriseOrg_Handler,
		},
		{
			MethodName: "InvokeScanGitleaks",
			Handler:    _CodeService_InvokeScanGitleaks_Handler,
		},
		{
			MethodName: "InvokeScanAllGitleaks",
			Handler:    _CodeService_InvokeScanAllGitleaks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code/service.proto",
}
