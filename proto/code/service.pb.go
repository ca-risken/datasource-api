// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.33.0
// source: code/service.proto

package code

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDataSourceId uint32 `protobuf:"varint,1,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDataSourceRequest) Reset() {
	*x = ListDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourceRequest) ProtoMessage() {}

func (x *ListDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourceRequest.ProtoReflect.Descriptor instead.
func (*ListDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListDataSourceRequest) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *ListDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDataSource []*CodeDataSource `protobuf:"bytes,1,rep,name=code_data_source,json=codeDataSource,proto3" json:"code_data_source,omitempty"`
}

func (x *ListDataSourceResponse) Reset() {
	*x = ListDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataSourceResponse) ProtoMessage() {}

func (x *ListDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataSourceResponse.ProtoReflect.Descriptor instead.
func (*ListDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDataSourceResponse) GetCodeDataSource() []*CodeDataSource {
	if x != nil {
		return x.CodeDataSource
	}
	return nil
}

type ListGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *ListGitHubSettingRequest) Reset() {
	*x = ListGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubSettingRequest) ProtoMessage() {}

func (x *ListGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*ListGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting []*GitHubSetting `protobuf:"bytes,1,rep,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *ListGitHubSettingResponse) Reset() {
	*x = ListGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubSettingResponse) ProtoMessage() {}

func (x *ListGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*ListGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListGitHubSettingResponse) GetGithubSetting() []*GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type GetGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *GetGitHubSettingRequest) Reset() {
	*x = GetGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitHubSettingRequest) ProtoMessage() {}

func (x *GetGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*GetGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type GetGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting *GitHubSetting `protobuf:"bytes,1,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *GetGitHubSettingResponse) Reset() {
	*x = GetGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitHubSettingResponse) ProtoMessage() {}

func (x *GetGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*GetGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetGitHubSettingResponse) GetGithubSetting() *GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type PutGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32                  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSetting *GitHubSettingForUpsert `protobuf:"bytes,2,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *PutGitHubSettingRequest) Reset() {
	*x = PutGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubSettingRequest) ProtoMessage() {}

func (x *PutGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*PutGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{6}
}

func (x *PutGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitHubSettingRequest) GetGithubSetting() *GitHubSettingForUpsert {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type PutGitHubSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSetting *GitHubSetting `protobuf:"bytes,1,opt,name=github_setting,json=githubSetting,proto3" json:"github_setting,omitempty"`
}

func (x *PutGitHubSettingResponse) Reset() {
	*x = PutGitHubSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitHubSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitHubSettingResponse) ProtoMessage() {}

func (x *PutGitHubSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitHubSettingResponse.ProtoReflect.Descriptor instead.
func (*PutGitHubSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{7}
}

func (x *PutGitHubSettingResponse) GetGithubSetting() *GitHubSetting {
	if x != nil {
		return x.GithubSetting
	}
	return nil
}

type DeleteGitHubSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteGitHubSettingRequest) Reset() {
	*x = DeleteGitHubSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitHubSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitHubSettingRequest) ProtoMessage() {}

func (x *DeleteGitHubSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitHubSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitHubSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteGitHubSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteGitHubSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type PutGitleaksSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32                    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GitleaksSetting *GitleaksSettingForUpsert `protobuf:"bytes,2,opt,name=gitleaks_setting,json=gitleaksSetting,proto3" json:"gitleaks_setting,omitempty"`
}

func (x *PutGitleaksSettingRequest) Reset() {
	*x = PutGitleaksSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksSettingRequest) ProtoMessage() {}

func (x *PutGitleaksSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksSettingRequest.ProtoReflect.Descriptor instead.
func (*PutGitleaksSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{9}
}

func (x *PutGitleaksSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitleaksSettingRequest) GetGitleaksSetting() *GitleaksSettingForUpsert {
	if x != nil {
		return x.GitleaksSetting
	}
	return nil
}

type PutGitleaksSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitleaksSetting *GitleaksSetting `protobuf:"bytes,1,opt,name=gitleaks_setting,json=gitleaksSetting,proto3" json:"gitleaks_setting,omitempty"`
}

func (x *PutGitleaksSettingResponse) Reset() {
	*x = PutGitleaksSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksSettingResponse) ProtoMessage() {}

func (x *PutGitleaksSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksSettingResponse.ProtoReflect.Descriptor instead.
func (*PutGitleaksSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{10}
}

func (x *PutGitleaksSettingResponse) GetGitleaksSetting() *GitleaksSetting {
	if x != nil {
		return x.GitleaksSetting
	}
	return nil
}

type DeleteGitleaksSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteGitleaksSettingRequest) Reset() {
	*x = DeleteGitleaksSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGitleaksSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGitleaksSettingRequest) ProtoMessage() {}

func (x *DeleteGitleaksSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGitleaksSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteGitleaksSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteGitleaksSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteGitleaksSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitleaksCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *ListGitleaksCacheRequest) Reset() {
	*x = ListGitleaksCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitleaksCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitleaksCacheRequest) ProtoMessage() {}

func (x *ListGitleaksCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitleaksCacheRequest.ProtoReflect.Descriptor instead.
func (*ListGitleaksCacheRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListGitleaksCacheRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListGitleaksCacheRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type ListGitleaksCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitleaksCache []*GitleaksCache `protobuf:"bytes,1,rep,name=gitleaks_cache,json=gitleaksCache,proto3" json:"gitleaks_cache,omitempty"`
}

func (x *ListGitleaksCacheResponse) Reset() {
	*x = ListGitleaksCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitleaksCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitleaksCacheResponse) ProtoMessage() {}

func (x *ListGitleaksCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitleaksCacheResponse.ProtoReflect.Descriptor instead.
func (*ListGitleaksCacheResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListGitleaksCacheResponse) GetGitleaksCache() []*GitleaksCache {
	if x != nil {
		return x.GitleaksCache
	}
	return nil
}

type GetGitleaksCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId    uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,3,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
}

func (x *GetGitleaksCacheRequest) Reset() {
	*x = GetGitleaksCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitleaksCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitleaksCacheRequest) ProtoMessage() {}

func (x *GetGitleaksCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitleaksCacheRequest.ProtoReflect.Descriptor instead.
func (*GetGitleaksCacheRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetGitleaksCacheRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetGitleaksCacheRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GetGitleaksCacheRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

type GetGitleaksCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitleaksCache *GitleaksCache `protobuf:"bytes,1,opt,name=gitleaks_cache,json=gitleaksCache,proto3" json:"gitleaks_cache,omitempty"`
}

func (x *GetGitleaksCacheResponse) Reset() {
	*x = GetGitleaksCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitleaksCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitleaksCacheResponse) ProtoMessage() {}

func (x *GetGitleaksCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitleaksCacheResponse.ProtoReflect.Descriptor instead.
func (*GetGitleaksCacheResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetGitleaksCacheResponse) GetGitleaksCache() *GitleaksCache {
	if x != nil {
		return x.GitleaksCache
	}
	return nil
}

type PutGitleaksCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32                  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GitleaksCache *GitleaksCacheForUpsert `protobuf:"bytes,2,opt,name=gitleaks_cache,json=gitleaksCache,proto3" json:"gitleaks_cache,omitempty"`
}

func (x *PutGitleaksCacheRequest) Reset() {
	*x = PutGitleaksCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksCacheRequest) ProtoMessage() {}

func (x *PutGitleaksCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksCacheRequest.ProtoReflect.Descriptor instead.
func (*PutGitleaksCacheRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{16}
}

func (x *PutGitleaksCacheRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitleaksCacheRequest) GetGitleaksCache() *GitleaksCacheForUpsert {
	if x != nil {
		return x.GitleaksCache
	}
	return nil
}

type PutGitleaksCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitleaksCache *GitleaksCache `protobuf:"bytes,1,opt,name=gitleaks_cache,json=gitleaksCache,proto3" json:"gitleaks_cache,omitempty"`
}

func (x *PutGitleaksCacheResponse) Reset() {
	*x = PutGitleaksCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksCacheResponse) ProtoMessage() {}

func (x *PutGitleaksCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksCacheResponse.ProtoReflect.Descriptor instead.
func (*PutGitleaksCacheResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{17}
}

func (x *PutGitleaksCacheResponse) GetGitleaksCache() *GitleaksCache {
	if x != nil {
		return x.GitleaksCache
	}
	return nil
}

type PutDependencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint32                      `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DependencySetting *DependencySettingForUpsert `protobuf:"bytes,2,opt,name=dependency_setting,json=dependencySetting,proto3" json:"dependency_setting,omitempty"`
}

func (x *PutDependencySettingRequest) Reset() {
	*x = PutDependencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDependencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDependencySettingRequest) ProtoMessage() {}

func (x *PutDependencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDependencySettingRequest.ProtoReflect.Descriptor instead.
func (*PutDependencySettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{18}
}

func (x *PutDependencySettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDependencySettingRequest) GetDependencySetting() *DependencySettingForUpsert {
	if x != nil {
		return x.DependencySetting
	}
	return nil
}

type PutDependencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependencySetting *DependencySetting `protobuf:"bytes,1,opt,name=dependency_setting,json=dependencySetting,proto3" json:"dependency_setting,omitempty"`
}

func (x *PutDependencySettingResponse) Reset() {
	*x = PutDependencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDependencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDependencySettingResponse) ProtoMessage() {}

func (x *PutDependencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDependencySettingResponse.ProtoReflect.Descriptor instead.
func (*PutDependencySettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{19}
}

func (x *PutDependencySettingResponse) GetDependencySetting() *DependencySetting {
	if x != nil {
		return x.DependencySetting
	}
	return nil
}

type DeleteDependencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteDependencySettingRequest) Reset() {
	*x = DeleteDependencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDependencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDependencySettingRequest) ProtoMessage() {}

func (x *DeleteDependencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDependencySettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteDependencySettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteDependencySettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDependencySettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type PutCodeScanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32                    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeScanSetting *CodeScanSettingForUpsert `protobuf:"bytes,2,opt,name=code_scan_setting,json=codeScanSetting,proto3" json:"code_scan_setting,omitempty"`
}

func (x *PutCodeScanSettingRequest) Reset() {
	*x = PutCodeScanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCodeScanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCodeScanSettingRequest) ProtoMessage() {}

func (x *PutCodeScanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCodeScanSettingRequest.ProtoReflect.Descriptor instead.
func (*PutCodeScanSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{21}
}

func (x *PutCodeScanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutCodeScanSettingRequest) GetCodeScanSetting() *CodeScanSettingForUpsert {
	if x != nil {
		return x.CodeScanSetting
	}
	return nil
}

type PutCodeScanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeScanSetting *CodeScanSetting `protobuf:"bytes,1,opt,name=code_scan_setting,json=codeScanSetting,proto3" json:"code_scan_setting,omitempty"`
}

func (x *PutCodeScanSettingResponse) Reset() {
	*x = PutCodeScanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCodeScanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCodeScanSettingResponse) ProtoMessage() {}

func (x *PutCodeScanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCodeScanSettingResponse.ProtoReflect.Descriptor instead.
func (*PutCodeScanSettingResponse) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{22}
}

func (x *PutCodeScanSettingResponse) GetCodeScanSetting() *CodeScanSetting {
	if x != nil {
		return x.CodeScanSetting
	}
	return nil
}

type DeleteCodeScanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
}

func (x *DeleteCodeScanSettingRequest) Reset() {
	*x = DeleteCodeScanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCodeScanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCodeScanSettingRequest) ProtoMessage() {}

func (x *DeleteCodeScanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCodeScanSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteCodeScanSettingRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteCodeScanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteCodeScanSettingRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

type InvokeScanGitleaksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ScanOnly        bool   `protobuf:"varint,3,opt,name=scan_only,json=scanOnly,proto3" json:"scan_only,omitempty"`
	FullScan        bool   `protobuf:"varint,4,opt,name=full_scan,json=fullScan,proto3" json:"full_scan,omitempty"`
	RepositoryName  string `protobuf:"bytes,5,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *InvokeScanGitleaksRequest) Reset() {
	*x = InvokeScanGitleaksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanGitleaksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanGitleaksRequest) ProtoMessage() {}

func (x *InvokeScanGitleaksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanGitleaksRequest.ProtoReflect.Descriptor instead.
func (*InvokeScanGitleaksRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{24}
}

func (x *InvokeScanGitleaksRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvokeScanGitleaksRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *InvokeScanGitleaksRequest) GetScanOnly() bool {
	if x != nil {
		return x.ScanOnly
	}
	return false
}

func (x *InvokeScanGitleaksRequest) GetFullScan() bool {
	if x != nil {
		return x.FullScan
	}
	return false
}

func (x *InvokeScanGitleaksRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type InvokeScanDependencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ScanOnly        bool   `protobuf:"varint,3,opt,name=scan_only,json=scanOnly,proto3" json:"scan_only,omitempty"`
	RepositoryName  string `protobuf:"bytes,4,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *InvokeScanDependencyRequest) Reset() {
	*x = InvokeScanDependencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanDependencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanDependencyRequest) ProtoMessage() {}

func (x *InvokeScanDependencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanDependencyRequest.ProtoReflect.Descriptor instead.
func (*InvokeScanDependencyRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{25}
}

func (x *InvokeScanDependencyRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvokeScanDependencyRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *InvokeScanDependencyRequest) GetScanOnly() bool {
	if x != nil {
		return x.ScanOnly
	}
	return false
}

func (x *InvokeScanDependencyRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type InvokeScanCodeScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ScanOnly        bool   `protobuf:"varint,3,opt,name=scan_only,json=scanOnly,proto3" json:"scan_only,omitempty"`
	RepositoryName  string `protobuf:"bytes,4,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *InvokeScanCodeScanRequest) Reset() {
	*x = InvokeScanCodeScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanCodeScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanCodeScanRequest) ProtoMessage() {}

func (x *InvokeScanCodeScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanCodeScanRequest.ProtoReflect.Descriptor instead.
func (*InvokeScanCodeScanRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{26}
}

func (x *InvokeScanCodeScanRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvokeScanCodeScanRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *InvokeScanCodeScanRequest) GetScanOnly() bool {
	if x != nil {
		return x.ScanOnly
	}
	return false
}

func (x *InvokeScanCodeScanRequest) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type PutCodeScanRepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId    uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,3,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	Status             Status `protobuf:"varint,4,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail       string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt             int64  `protobuf:"varint,6,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *PutCodeScanRepositoryStatusRequest) Reset() {
	*x = PutCodeScanRepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCodeScanRepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCodeScanRepositoryStatusRequest) ProtoMessage() {}

func (x *PutCodeScanRepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCodeScanRepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*PutCodeScanRepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{27}
}

func (x *PutCodeScanRepositoryStatusRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutCodeScanRepositoryStatusRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *PutCodeScanRepositoryStatusRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *PutCodeScanRepositoryStatusRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *PutCodeScanRepositoryStatusRequest) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PutCodeScanRepositoryStatusRequest) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

type PutGitleaksRepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId    uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,3,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	Status             Status `protobuf:"varint,4,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail       string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt             int64  `protobuf:"varint,6,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *PutGitleaksRepositoryStatusRequest) Reset() {
	*x = PutGitleaksRepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutGitleaksRepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutGitleaksRepositoryStatusRequest) ProtoMessage() {}

func (x *PutGitleaksRepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutGitleaksRepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*PutGitleaksRepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{28}
}

func (x *PutGitleaksRepositoryStatusRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutGitleaksRepositoryStatusRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *PutGitleaksRepositoryStatusRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *PutGitleaksRepositoryStatusRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *PutGitleaksRepositoryStatusRequest) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PutGitleaksRepositoryStatusRequest) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

type PutDependencyRepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GithubSettingId    uint32 `protobuf:"varint,2,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,3,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	Status             Status `protobuf:"varint,4,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail       string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt             int64  `protobuf:"varint,6,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *PutDependencyRepositoryStatusRequest) Reset() {
	*x = PutDependencyRepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDependencyRepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDependencyRepositoryStatusRequest) ProtoMessage() {}

func (x *PutDependencyRepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_code_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDependencyRepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*PutDependencyRepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_code_service_proto_rawDescGZIP(), []int{29}
}

func (x *PutDependencyRepositoryStatusRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDependencyRepositoryStatusRequest) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *PutDependencyRepositoryStatusRequest) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *PutDependencyRepositoryStatusRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *PutDependencyRepositoryStatusRequest) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PutDependencyRepositoryStatusRequest) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

var File_code_service_proto protoreflect.FileDescriptor

var file_code_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x63, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x62, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x50,
	0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x67, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65,
	0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65,
	0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x69, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0e, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69,
	0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e,
	0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0d, 0x67,
	0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x61, 0x0a, 0x18,
	0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x6c,
	0x65, 0x61, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x0d, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x71, 0x0a, 0x1c, 0x50, 0x75,
	0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6b, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x50,
	0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6a,
	0x0a, 0x1a, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x63, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x90, 0x02, 0x0a, 0x22, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6e, 0x41, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x22, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c,
	0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x24, 0x50, 0x75, 0x74, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x32, 0xda, 0x10, 0x0a,
	0x0b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x12, 0x50, 0x75, 0x74,
	0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75,
	0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61,
	0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x29, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65,
	0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69,
	0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x10, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75,
	0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x50, 0x75, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x6d, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x47, 0x69, 0x74, 0x6c,
	0x65, 0x61, 0x6b, 0x73, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x6c,
	0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x6a, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a,
	0x1b, 0x50, 0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x1d, 0x50, 0x75, 0x74,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x65,
	0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_code_service_proto_rawDescOnce sync.Once
	file_code_service_proto_rawDescData = file_code_service_proto_rawDesc
)

func file_code_service_proto_rawDescGZIP() []byte {
	file_code_service_proto_rawDescOnce.Do(func() {
		file_code_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_code_service_proto_rawDescData)
	})
	return file_code_service_proto_rawDescData
}

var file_code_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_code_service_proto_goTypes = []interface{}{
	(*ListDataSourceRequest)(nil),                // 0: datasource.code.ListDataSourceRequest
	(*ListDataSourceResponse)(nil),               // 1: datasource.code.ListDataSourceResponse
	(*ListGitHubSettingRequest)(nil),             // 2: datasource.code.ListGitHubSettingRequest
	(*ListGitHubSettingResponse)(nil),            // 3: datasource.code.ListGitHubSettingResponse
	(*GetGitHubSettingRequest)(nil),              // 4: datasource.code.GetGitHubSettingRequest
	(*GetGitHubSettingResponse)(nil),             // 5: datasource.code.GetGitHubSettingResponse
	(*PutGitHubSettingRequest)(nil),              // 6: datasource.code.PutGitHubSettingRequest
	(*PutGitHubSettingResponse)(nil),             // 7: datasource.code.PutGitHubSettingResponse
	(*DeleteGitHubSettingRequest)(nil),           // 8: datasource.code.DeleteGitHubSettingRequest
	(*PutGitleaksSettingRequest)(nil),            // 9: datasource.code.PutGitleaksSettingRequest
	(*PutGitleaksSettingResponse)(nil),           // 10: datasource.code.PutGitleaksSettingResponse
	(*DeleteGitleaksSettingRequest)(nil),         // 11: datasource.code.DeleteGitleaksSettingRequest
	(*ListGitleaksCacheRequest)(nil),             // 12: datasource.code.ListGitleaksCacheRequest
	(*ListGitleaksCacheResponse)(nil),            // 13: datasource.code.ListGitleaksCacheResponse
	(*GetGitleaksCacheRequest)(nil),              // 14: datasource.code.GetGitleaksCacheRequest
	(*GetGitleaksCacheResponse)(nil),             // 15: datasource.code.GetGitleaksCacheResponse
	(*PutGitleaksCacheRequest)(nil),              // 16: datasource.code.PutGitleaksCacheRequest
	(*PutGitleaksCacheResponse)(nil),             // 17: datasource.code.PutGitleaksCacheResponse
	(*PutDependencySettingRequest)(nil),          // 18: datasource.code.PutDependencySettingRequest
	(*PutDependencySettingResponse)(nil),         // 19: datasource.code.PutDependencySettingResponse
	(*DeleteDependencySettingRequest)(nil),       // 20: datasource.code.DeleteDependencySettingRequest
	(*PutCodeScanSettingRequest)(nil),            // 21: datasource.code.PutCodeScanSettingRequest
	(*PutCodeScanSettingResponse)(nil),           // 22: datasource.code.PutCodeScanSettingResponse
	(*DeleteCodeScanSettingRequest)(nil),         // 23: datasource.code.DeleteCodeScanSettingRequest
	(*InvokeScanGitleaksRequest)(nil),            // 24: datasource.code.InvokeScanGitleaksRequest
	(*InvokeScanDependencyRequest)(nil),          // 25: datasource.code.InvokeScanDependencyRequest
	(*InvokeScanCodeScanRequest)(nil),            // 26: datasource.code.InvokeScanCodeScanRequest
	(*PutCodeScanRepositoryStatusRequest)(nil),   // 27: datasource.code.PutCodeScanRepositoryStatusRequest
	(*PutGitleaksRepositoryStatusRequest)(nil),   // 28: datasource.code.PutGitleaksRepositoryStatusRequest
	(*PutDependencyRepositoryStatusRequest)(nil), // 29: datasource.code.PutDependencyRepositoryStatusRequest
	(*CodeDataSource)(nil),                       // 30: datasource.code.CodeDataSource
	(*GitHubSetting)(nil),                        // 31: datasource.code.GitHubSetting
	(*GitHubSettingForUpsert)(nil),               // 32: datasource.code.GitHubSettingForUpsert
	(*GitleaksSettingForUpsert)(nil),             // 33: datasource.code.GitleaksSettingForUpsert
	(*GitleaksSetting)(nil),                      // 34: datasource.code.GitleaksSetting
	(*GitleaksCache)(nil),                        // 35: datasource.code.GitleaksCache
	(*GitleaksCacheForUpsert)(nil),               // 36: datasource.code.GitleaksCacheForUpsert
	(*DependencySettingForUpsert)(nil),           // 37: datasource.code.DependencySettingForUpsert
	(*DependencySetting)(nil),                    // 38: datasource.code.DependencySetting
	(*CodeScanSettingForUpsert)(nil),             // 39: datasource.code.CodeScanSettingForUpsert
	(*CodeScanSetting)(nil),                      // 40: datasource.code.CodeScanSetting
	(Status)(0),                                  // 41: datasource.code.Status
	(*emptypb.Empty)(nil),                        // 42: google.protobuf.Empty
}
var file_code_service_proto_depIdxs = []int32{
	30, // 0: datasource.code.ListDataSourceResponse.code_data_source:type_name -> datasource.code.CodeDataSource
	31, // 1: datasource.code.ListGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	31, // 2: datasource.code.GetGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	32, // 3: datasource.code.PutGitHubSettingRequest.github_setting:type_name -> datasource.code.GitHubSettingForUpsert
	31, // 4: datasource.code.PutGitHubSettingResponse.github_setting:type_name -> datasource.code.GitHubSetting
	33, // 5: datasource.code.PutGitleaksSettingRequest.gitleaks_setting:type_name -> datasource.code.GitleaksSettingForUpsert
	34, // 6: datasource.code.PutGitleaksSettingResponse.gitleaks_setting:type_name -> datasource.code.GitleaksSetting
	35, // 7: datasource.code.ListGitleaksCacheResponse.gitleaks_cache:type_name -> datasource.code.GitleaksCache
	35, // 8: datasource.code.GetGitleaksCacheResponse.gitleaks_cache:type_name -> datasource.code.GitleaksCache
	36, // 9: datasource.code.PutGitleaksCacheRequest.gitleaks_cache:type_name -> datasource.code.GitleaksCacheForUpsert
	35, // 10: datasource.code.PutGitleaksCacheResponse.gitleaks_cache:type_name -> datasource.code.GitleaksCache
	37, // 11: datasource.code.PutDependencySettingRequest.dependency_setting:type_name -> datasource.code.DependencySettingForUpsert
	38, // 12: datasource.code.PutDependencySettingResponse.dependency_setting:type_name -> datasource.code.DependencySetting
	39, // 13: datasource.code.PutCodeScanSettingRequest.code_scan_setting:type_name -> datasource.code.CodeScanSettingForUpsert
	40, // 14: datasource.code.PutCodeScanSettingResponse.code_scan_setting:type_name -> datasource.code.CodeScanSetting
	41, // 15: datasource.code.PutCodeScanRepositoryStatusRequest.status:type_name -> datasource.code.Status
	41, // 16: datasource.code.PutGitleaksRepositoryStatusRequest.status:type_name -> datasource.code.Status
	41, // 17: datasource.code.PutDependencyRepositoryStatusRequest.status:type_name -> datasource.code.Status
	0,  // 18: datasource.code.CodeService.ListDataSource:input_type -> datasource.code.ListDataSourceRequest
	2,  // 19: datasource.code.CodeService.ListGitHubSetting:input_type -> datasource.code.ListGitHubSettingRequest
	4,  // 20: datasource.code.CodeService.GetGitHubSetting:input_type -> datasource.code.GetGitHubSettingRequest
	6,  // 21: datasource.code.CodeService.PutGitHubSetting:input_type -> datasource.code.PutGitHubSettingRequest
	8,  // 22: datasource.code.CodeService.DeleteGitHubSetting:input_type -> datasource.code.DeleteGitHubSettingRequest
	9,  // 23: datasource.code.CodeService.PutGitleaksSetting:input_type -> datasource.code.PutGitleaksSettingRequest
	11, // 24: datasource.code.CodeService.DeleteGitleaksSetting:input_type -> datasource.code.DeleteGitleaksSettingRequest
	12, // 25: datasource.code.CodeService.ListGitleaksCache:input_type -> datasource.code.ListGitleaksCacheRequest
	14, // 26: datasource.code.CodeService.GetGitleaksCache:input_type -> datasource.code.GetGitleaksCacheRequest
	16, // 27: datasource.code.CodeService.PutGitleaksCache:input_type -> datasource.code.PutGitleaksCacheRequest
	18, // 28: datasource.code.CodeService.PutDependencySetting:input_type -> datasource.code.PutDependencySettingRequest
	20, // 29: datasource.code.CodeService.DeleteDependencySetting:input_type -> datasource.code.DeleteDependencySettingRequest
	21, // 30: datasource.code.CodeService.PutCodeScanSetting:input_type -> datasource.code.PutCodeScanSettingRequest
	23, // 31: datasource.code.CodeService.DeleteCodeScanSetting:input_type -> datasource.code.DeleteCodeScanSettingRequest
	24, // 32: datasource.code.CodeService.InvokeScanGitleaks:input_type -> datasource.code.InvokeScanGitleaksRequest
	25, // 33: datasource.code.CodeService.InvokeScanDependency:input_type -> datasource.code.InvokeScanDependencyRequest
	26, // 34: datasource.code.CodeService.InvokeScanCodeScan:input_type -> datasource.code.InvokeScanCodeScanRequest
	42, // 35: datasource.code.CodeService.InvokeScanAll:input_type -> google.protobuf.Empty
	27, // 36: datasource.code.CodeService.PutCodeScanRepositoryStatus:input_type -> datasource.code.PutCodeScanRepositoryStatusRequest
	28, // 37: datasource.code.CodeService.PutGitleaksRepositoryStatus:input_type -> datasource.code.PutGitleaksRepositoryStatusRequest
	29, // 38: datasource.code.CodeService.PutDependencyRepositoryStatus:input_type -> datasource.code.PutDependencyRepositoryStatusRequest
	1,  // 39: datasource.code.CodeService.ListDataSource:output_type -> datasource.code.ListDataSourceResponse
	3,  // 40: datasource.code.CodeService.ListGitHubSetting:output_type -> datasource.code.ListGitHubSettingResponse
	5,  // 41: datasource.code.CodeService.GetGitHubSetting:output_type -> datasource.code.GetGitHubSettingResponse
	7,  // 42: datasource.code.CodeService.PutGitHubSetting:output_type -> datasource.code.PutGitHubSettingResponse
	42, // 43: datasource.code.CodeService.DeleteGitHubSetting:output_type -> google.protobuf.Empty
	10, // 44: datasource.code.CodeService.PutGitleaksSetting:output_type -> datasource.code.PutGitleaksSettingResponse
	42, // 45: datasource.code.CodeService.DeleteGitleaksSetting:output_type -> google.protobuf.Empty
	13, // 46: datasource.code.CodeService.ListGitleaksCache:output_type -> datasource.code.ListGitleaksCacheResponse
	15, // 47: datasource.code.CodeService.GetGitleaksCache:output_type -> datasource.code.GetGitleaksCacheResponse
	17, // 48: datasource.code.CodeService.PutGitleaksCache:output_type -> datasource.code.PutGitleaksCacheResponse
	19, // 49: datasource.code.CodeService.PutDependencySetting:output_type -> datasource.code.PutDependencySettingResponse
	42, // 50: datasource.code.CodeService.DeleteDependencySetting:output_type -> google.protobuf.Empty
	22, // 51: datasource.code.CodeService.PutCodeScanSetting:output_type -> datasource.code.PutCodeScanSettingResponse
	42, // 52: datasource.code.CodeService.DeleteCodeScanSetting:output_type -> google.protobuf.Empty
	42, // 53: datasource.code.CodeService.InvokeScanGitleaks:output_type -> google.protobuf.Empty
	42, // 54: datasource.code.CodeService.InvokeScanDependency:output_type -> google.protobuf.Empty
	42, // 55: datasource.code.CodeService.InvokeScanCodeScan:output_type -> google.protobuf.Empty
	42, // 56: datasource.code.CodeService.InvokeScanAll:output_type -> google.protobuf.Empty
	42, // 57: datasource.code.CodeService.PutCodeScanRepositoryStatus:output_type -> google.protobuf.Empty
	42, // 58: datasource.code.CodeService.PutGitleaksRepositoryStatus:output_type -> google.protobuf.Empty
	42, // 59: datasource.code.CodeService.PutDependencyRepositoryStatus:output_type -> google.protobuf.Empty
	39, // [39:60] is the sub-list for method output_type
	18, // [18:39] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_code_service_proto_init() }
func file_code_service_proto_init() {
	if File_code_service_proto != nil {
		return
	}
	file_code_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_code_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitHubSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitHubSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGitleaksSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitleaksCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitleaksCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitleaksCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitleaksCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDependencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDependencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDependencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCodeScanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCodeScanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCodeScanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanGitleaksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanDependencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanCodeScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCodeScanRepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutGitleaksRepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDependencyRepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_code_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_code_service_proto_goTypes,
		DependencyIndexes: file_code_service_proto_depIdxs,
		MessageInfos:      file_code_service_proto_msgTypes,
	}.Build()
	File_code_service_proto = out.File
	file_code_service_proto_rawDesc = nil
	file_code_service_proto_goTypes = nil
	file_code_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CodeServiceClient is the client API for CodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodeServiceClient interface {
	// Code DataSource
	ListDataSource(ctx context.Context, in *ListDataSourceRequest, opts ...grpc.CallOption) (*ListDataSourceResponse, error)
	// GitHubSetting
	ListGitHubSetting(ctx context.Context, in *ListGitHubSettingRequest, opts ...grpc.CallOption) (*ListGitHubSettingResponse, error)
	GetGitHubSetting(ctx context.Context, in *GetGitHubSettingRequest, opts ...grpc.CallOption) (*GetGitHubSettingResponse, error)
	PutGitHubSetting(ctx context.Context, in *PutGitHubSettingRequest, opts ...grpc.CallOption) (*PutGitHubSettingResponse, error)
	DeleteGitHubSetting(ctx context.Context, in *DeleteGitHubSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GitleaksSetting
	PutGitleaksSetting(ctx context.Context, in *PutGitleaksSettingRequest, opts ...grpc.CallOption) (*PutGitleaksSettingResponse, error)
	DeleteGitleaksSetting(ctx context.Context, in *DeleteGitleaksSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GitleaksCache
	ListGitleaksCache(ctx context.Context, in *ListGitleaksCacheRequest, opts ...grpc.CallOption) (*ListGitleaksCacheResponse, error)
	GetGitleaksCache(ctx context.Context, in *GetGitleaksCacheRequest, opts ...grpc.CallOption) (*GetGitleaksCacheResponse, error)
	PutGitleaksCache(ctx context.Context, in *PutGitleaksCacheRequest, opts ...grpc.CallOption) (*PutGitleaksCacheResponse, error)
	// DependencySetting
	PutDependencySetting(ctx context.Context, in *PutDependencySettingRequest, opts ...grpc.CallOption) (*PutDependencySettingResponse, error)
	DeleteDependencySetting(ctx context.Context, in *DeleteDependencySettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CodeScanSetting
	PutCodeScanSetting(ctx context.Context, in *PutCodeScanSettingRequest, opts ...grpc.CallOption) (*PutCodeScanSettingResponse, error)
	DeleteCodeScanSetting(ctx context.Context, in *DeleteCodeScanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Scan
	InvokeScanGitleaks(ctx context.Context, in *InvokeScanGitleaksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvokeScanDependency(ctx context.Context, in *InvokeScanDependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvokeScanCodeScan(ctx context.Context, in *InvokeScanCodeScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvokeScanAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Repository-level status update
	PutCodeScanRepositoryStatus(ctx context.Context, in *PutCodeScanRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutGitleaksRepositoryStatus(ctx context.Context, in *PutGitleaksRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutDependencyRepositoryStatus(ctx context.Context, in *PutDependencyRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type codeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeServiceClient(cc grpc.ClientConnInterface) CodeServiceClient {
	return &codeServiceClient{cc}
}

func (c *codeServiceClient) ListDataSource(ctx context.Context, in *ListDataSourceRequest, opts ...grpc.CallOption) (*ListDataSourceResponse, error) {
	out := new(ListDataSourceResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) ListGitHubSetting(ctx context.Context, in *ListGitHubSettingRequest, opts ...grpc.CallOption) (*ListGitHubSettingResponse, error) {
	out := new(ListGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) GetGitHubSetting(ctx context.Context, in *GetGitHubSettingRequest, opts ...grpc.CallOption) (*GetGitHubSettingResponse, error) {
	out := new(GetGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/GetGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitHubSetting(ctx context.Context, in *PutGitHubSettingRequest, opts ...grpc.CallOption) (*PutGitHubSettingResponse, error) {
	out := new(PutGitHubSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteGitHubSetting(ctx context.Context, in *DeleteGitHubSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteGitHubSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitleaksSetting(ctx context.Context, in *PutGitleaksSettingRequest, opts ...grpc.CallOption) (*PutGitleaksSettingResponse, error) {
	out := new(PutGitleaksSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitleaksSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteGitleaksSetting(ctx context.Context, in *DeleteGitleaksSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteGitleaksSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) ListGitleaksCache(ctx context.Context, in *ListGitleaksCacheRequest, opts ...grpc.CallOption) (*ListGitleaksCacheResponse, error) {
	out := new(ListGitleaksCacheResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/ListGitleaksCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) GetGitleaksCache(ctx context.Context, in *GetGitleaksCacheRequest, opts ...grpc.CallOption) (*GetGitleaksCacheResponse, error) {
	out := new(GetGitleaksCacheResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/GetGitleaksCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitleaksCache(ctx context.Context, in *PutGitleaksCacheRequest, opts ...grpc.CallOption) (*PutGitleaksCacheResponse, error) {
	out := new(PutGitleaksCacheResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitleaksCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutDependencySetting(ctx context.Context, in *PutDependencySettingRequest, opts ...grpc.CallOption) (*PutDependencySettingResponse, error) {
	out := new(PutDependencySettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutDependencySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteDependencySetting(ctx context.Context, in *DeleteDependencySettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteDependencySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutCodeScanSetting(ctx context.Context, in *PutCodeScanSettingRequest, opts ...grpc.CallOption) (*PutCodeScanSettingResponse, error) {
	out := new(PutCodeScanSettingResponse)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutCodeScanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) DeleteCodeScanSetting(ctx context.Context, in *DeleteCodeScanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/DeleteCodeScanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanGitleaks(ctx context.Context, in *InvokeScanGitleaksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanGitleaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanDependency(ctx context.Context, in *InvokeScanDependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanCodeScan(ctx context.Context, in *InvokeScanCodeScanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanCodeScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) InvokeScanAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/InvokeScanAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutCodeScanRepositoryStatus(ctx context.Context, in *PutCodeScanRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutCodeScanRepositoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutGitleaksRepositoryStatus(ctx context.Context, in *PutGitleaksRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutGitleaksRepositoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeServiceClient) PutDependencyRepositoryStatus(ctx context.Context, in *PutDependencyRepositoryStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/datasource.code.CodeService/PutDependencyRepositoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeServiceServer is the server API for CodeService service.
type CodeServiceServer interface {
	// Code DataSource
	ListDataSource(context.Context, *ListDataSourceRequest) (*ListDataSourceResponse, error)
	// GitHubSetting
	ListGitHubSetting(context.Context, *ListGitHubSettingRequest) (*ListGitHubSettingResponse, error)
	GetGitHubSetting(context.Context, *GetGitHubSettingRequest) (*GetGitHubSettingResponse, error)
	PutGitHubSetting(context.Context, *PutGitHubSettingRequest) (*PutGitHubSettingResponse, error)
	DeleteGitHubSetting(context.Context, *DeleteGitHubSettingRequest) (*emptypb.Empty, error)
	// GitleaksSetting
	PutGitleaksSetting(context.Context, *PutGitleaksSettingRequest) (*PutGitleaksSettingResponse, error)
	DeleteGitleaksSetting(context.Context, *DeleteGitleaksSettingRequest) (*emptypb.Empty, error)
	// GitleaksCache
	ListGitleaksCache(context.Context, *ListGitleaksCacheRequest) (*ListGitleaksCacheResponse, error)
	GetGitleaksCache(context.Context, *GetGitleaksCacheRequest) (*GetGitleaksCacheResponse, error)
	PutGitleaksCache(context.Context, *PutGitleaksCacheRequest) (*PutGitleaksCacheResponse, error)
	// DependencySetting
	PutDependencySetting(context.Context, *PutDependencySettingRequest) (*PutDependencySettingResponse, error)
	DeleteDependencySetting(context.Context, *DeleteDependencySettingRequest) (*emptypb.Empty, error)
	// CodeScanSetting
	PutCodeScanSetting(context.Context, *PutCodeScanSettingRequest) (*PutCodeScanSettingResponse, error)
	DeleteCodeScanSetting(context.Context, *DeleteCodeScanSettingRequest) (*emptypb.Empty, error)
	// Scan
	InvokeScanGitleaks(context.Context, *InvokeScanGitleaksRequest) (*emptypb.Empty, error)
	InvokeScanDependency(context.Context, *InvokeScanDependencyRequest) (*emptypb.Empty, error)
	InvokeScanCodeScan(context.Context, *InvokeScanCodeScanRequest) (*emptypb.Empty, error)
	InvokeScanAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Repository-level status update
	PutCodeScanRepositoryStatus(context.Context, *PutCodeScanRepositoryStatusRequest) (*emptypb.Empty, error)
	PutGitleaksRepositoryStatus(context.Context, *PutGitleaksRepositoryStatusRequest) (*emptypb.Empty, error)
	PutDependencyRepositoryStatus(context.Context, *PutDependencyRepositoryStatusRequest) (*emptypb.Empty, error)
}

// UnimplementedCodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCodeServiceServer struct {
}

func (*UnimplementedCodeServiceServer) ListDataSource(context.Context, *ListDataSourceRequest) (*ListDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSource not implemented")
}
func (*UnimplementedCodeServiceServer) ListGitHubSetting(context.Context, *ListGitHubSettingRequest) (*ListGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) GetGitHubSetting(context.Context, *GetGitHubSettingRequest) (*GetGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitHubSetting(context.Context, *PutGitHubSettingRequest) (*PutGitHubSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteGitHubSetting(context.Context, *DeleteGitHubSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitHubSetting not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitleaksSetting(context.Context, *PutGitleaksSettingRequest) (*PutGitleaksSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitleaksSetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteGitleaksSetting(context.Context, *DeleteGitleaksSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitleaksSetting not implemented")
}
func (*UnimplementedCodeServiceServer) ListGitleaksCache(context.Context, *ListGitleaksCacheRequest) (*ListGitleaksCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitleaksCache not implemented")
}
func (*UnimplementedCodeServiceServer) GetGitleaksCache(context.Context, *GetGitleaksCacheRequest) (*GetGitleaksCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitleaksCache not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitleaksCache(context.Context, *PutGitleaksCacheRequest) (*PutGitleaksCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitleaksCache not implemented")
}
func (*UnimplementedCodeServiceServer) PutDependencySetting(context.Context, *PutDependencySettingRequest) (*PutDependencySettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDependencySetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteDependencySetting(context.Context, *DeleteDependencySettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDependencySetting not implemented")
}
func (*UnimplementedCodeServiceServer) PutCodeScanSetting(context.Context, *PutCodeScanSettingRequest) (*PutCodeScanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCodeScanSetting not implemented")
}
func (*UnimplementedCodeServiceServer) DeleteCodeScanSetting(context.Context, *DeleteCodeScanSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeScanSetting not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanGitleaks(context.Context, *InvokeScanGitleaksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanGitleaks not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanDependency(context.Context, *InvokeScanDependencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanDependency not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanCodeScan(context.Context, *InvokeScanCodeScanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanCodeScan not implemented")
}
func (*UnimplementedCodeServiceServer) InvokeScanAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanAll not implemented")
}
func (*UnimplementedCodeServiceServer) PutCodeScanRepositoryStatus(context.Context, *PutCodeScanRepositoryStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCodeScanRepositoryStatus not implemented")
}
func (*UnimplementedCodeServiceServer) PutGitleaksRepositoryStatus(context.Context, *PutGitleaksRepositoryStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGitleaksRepositoryStatus not implemented")
}
func (*UnimplementedCodeServiceServer) PutDependencyRepositoryStatus(context.Context, *PutDependencyRepositoryStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDependencyRepositoryStatus not implemented")
}

func RegisterCodeServiceServer(s *grpc.Server, srv CodeServiceServer) {
	s.RegisterService(&_CodeService_serviceDesc, srv)
}

func _CodeService_ListDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListDataSource(ctx, req.(*ListDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_ListGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListGitHubSetting(ctx, req.(*ListGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_GetGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).GetGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/GetGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).GetGitHubSetting(ctx, req.(*GetGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitHubSetting(ctx, req.(*PutGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteGitHubSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitHubSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteGitHubSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteGitHubSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteGitHubSetting(ctx, req.(*DeleteGitHubSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitleaksSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitleaksSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitleaksSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitleaksSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitleaksSetting(ctx, req.(*PutGitleaksSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteGitleaksSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitleaksSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteGitleaksSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteGitleaksSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteGitleaksSetting(ctx, req.(*DeleteGitleaksSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_ListGitleaksCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitleaksCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).ListGitleaksCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/ListGitleaksCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).ListGitleaksCache(ctx, req.(*ListGitleaksCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_GetGitleaksCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitleaksCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).GetGitleaksCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/GetGitleaksCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).GetGitleaksCache(ctx, req.(*GetGitleaksCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitleaksCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitleaksCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitleaksCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitleaksCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitleaksCache(ctx, req.(*PutGitleaksCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutDependencySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDependencySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutDependencySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutDependencySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutDependencySetting(ctx, req.(*PutDependencySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteDependencySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDependencySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteDependencySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteDependencySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteDependencySetting(ctx, req.(*DeleteDependencySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutCodeScanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCodeScanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutCodeScanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutCodeScanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutCodeScanSetting(ctx, req.(*PutCodeScanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_DeleteCodeScanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCodeScanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).DeleteCodeScanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/DeleteCodeScanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).DeleteCodeScanSetting(ctx, req.(*DeleteCodeScanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanGitleaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeScanGitleaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanGitleaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanGitleaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanGitleaks(ctx, req.(*InvokeScanGitleaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeScanDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanDependency(ctx, req.(*InvokeScanDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanCodeScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeScanCodeScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanCodeScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanCodeScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanCodeScan(ctx, req.(*InvokeScanCodeScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_InvokeScanAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).InvokeScanAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/InvokeScanAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).InvokeScanAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutCodeScanRepositoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCodeScanRepositoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutCodeScanRepositoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutCodeScanRepositoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutCodeScanRepositoryStatus(ctx, req.(*PutCodeScanRepositoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutGitleaksRepositoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGitleaksRepositoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutGitleaksRepositoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutGitleaksRepositoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutGitleaksRepositoryStatus(ctx, req.(*PutGitleaksRepositoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeService_PutDependencyRepositoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDependencyRepositoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServiceServer).PutDependencyRepositoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.code.CodeService/PutDependencyRepositoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServiceServer).PutDependencyRepositoryStatus(ctx, req.(*PutDependencyRepositoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasource.code.CodeService",
	HandlerType: (*CodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataSource",
			Handler:    _CodeService_ListDataSource_Handler,
		},
		{
			MethodName: "ListGitHubSetting",
			Handler:    _CodeService_ListGitHubSetting_Handler,
		},
		{
			MethodName: "GetGitHubSetting",
			Handler:    _CodeService_GetGitHubSetting_Handler,
		},
		{
			MethodName: "PutGitHubSetting",
			Handler:    _CodeService_PutGitHubSetting_Handler,
		},
		{
			MethodName: "DeleteGitHubSetting",
			Handler:    _CodeService_DeleteGitHubSetting_Handler,
		},
		{
			MethodName: "PutGitleaksSetting",
			Handler:    _CodeService_PutGitleaksSetting_Handler,
		},
		{
			MethodName: "DeleteGitleaksSetting",
			Handler:    _CodeService_DeleteGitleaksSetting_Handler,
		},
		{
			MethodName: "ListGitleaksCache",
			Handler:    _CodeService_ListGitleaksCache_Handler,
		},
		{
			MethodName: "GetGitleaksCache",
			Handler:    _CodeService_GetGitleaksCache_Handler,
		},
		{
			MethodName: "PutGitleaksCache",
			Handler:    _CodeService_PutGitleaksCache_Handler,
		},
		{
			MethodName: "PutDependencySetting",
			Handler:    _CodeService_PutDependencySetting_Handler,
		},
		{
			MethodName: "DeleteDependencySetting",
			Handler:    _CodeService_DeleteDependencySetting_Handler,
		},
		{
			MethodName: "PutCodeScanSetting",
			Handler:    _CodeService_PutCodeScanSetting_Handler,
		},
		{
			MethodName: "DeleteCodeScanSetting",
			Handler:    _CodeService_DeleteCodeScanSetting_Handler,
		},
		{
			MethodName: "InvokeScanGitleaks",
			Handler:    _CodeService_InvokeScanGitleaks_Handler,
		},
		{
			MethodName: "InvokeScanDependency",
			Handler:    _CodeService_InvokeScanDependency_Handler,
		},
		{
			MethodName: "InvokeScanCodeScan",
			Handler:    _CodeService_InvokeScanCodeScan_Handler,
		},
		{
			MethodName: "InvokeScanAll",
			Handler:    _CodeService_InvokeScanAll_Handler,
		},
		{
			MethodName: "PutCodeScanRepositoryStatus",
			Handler:    _CodeService_PutCodeScanRepositoryStatus_Handler,
		},
		{
			MethodName: "PutGitleaksRepositoryStatus",
			Handler:    _CodeService_PutGitleaksRepositoryStatus_Handler,
		},
		{
			MethodName: "PutDependencyRepositoryStatus",
			Handler:    _CodeService_PutDependencyRepositoryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code/service.proto",
}
