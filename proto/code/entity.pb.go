// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.33.0
// source: code/entity.proto

package code

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type
type Type int32

const (
	Type_UNKNOWN_TYPE Type = 0
	Type_ORGANIZATION Type = 1
	Type_USER         Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "ORGANIZATION",
		2: "USER",
	}
	Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"ORGANIZATION": 1,
		"USER":         2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_code_entity_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_code_entity_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{0}
}

// Status
type Status int32

const (
	Status_UNKNOWN     Status = 0
	Status_OK          Status = 1
	Status_CONFIGURED  Status = 2
	Status_IN_PROGRESS Status = 3
	Status_ERROR       Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "CONFIGURED",
		3: "IN_PROGRESS",
		4: "ERROR",
	}
	Status_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"CONFIGURED":  2,
		"IN_PROGRESS": 3,
		"ERROR":       4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_code_entity_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_code_entity_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{1}
}

// CodeDataSource
type CodeDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDataSourceId uint32  `protobuf:"varint,1,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MaxScore         float32 `protobuf:"fixed32,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	CreatedAt        int64   `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64   `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CodeDataSource) Reset() {
	*x = CodeDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeDataSource) ProtoMessage() {}

func (x *CodeDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeDataSource.ProtoReflect.Descriptor instead.
func (*CodeDataSource) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{0}
}

func (x *CodeDataSource) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *CodeDataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeDataSource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CodeDataSource) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *CodeDataSource) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CodeDataSource) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// GitHubSetting
type GitHubSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId     uint32             `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId           uint32             `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name                string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	GithubUser          string             `protobuf:"bytes,4,opt,name=github_user,json=githubUser,proto3" json:"github_user,omitempty"`
	PersonalAccessToken string             `protobuf:"bytes,5,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
	Type                Type               `protobuf:"varint,6,opt,name=type,proto3,enum=datasource.code.Type" json:"type,omitempty"`
	BaseUrl             string             `protobuf:"bytes,7,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	TargetResource      string             `protobuf:"bytes,8,opt,name=target_resource,json=targetResource,proto3" json:"target_resource,omitempty"`
	CreatedAt           int64              `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           int64              `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	GitleaksSetting     *GitleaksSetting   `protobuf:"bytes,11,opt,name=gitleaks_setting,json=gitleaksSetting,proto3" json:"gitleaks_setting,omitempty"`
	DependencySetting   *DependencySetting `protobuf:"bytes,12,opt,name=dependency_setting,json=dependencySetting,proto3" json:"dependency_setting,omitempty"`
	CodeScanSetting     *CodeScanSetting   `protobuf:"bytes,13,opt,name=code_scan_setting,json=codeScanSetting,proto3" json:"code_scan_setting,omitempty"`
}

func (x *GitHubSetting) Reset() {
	*x = GitHubSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubSetting) ProtoMessage() {}

func (x *GitHubSetting) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubSetting.ProtoReflect.Descriptor instead.
func (*GitHubSetting) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{1}
}

func (x *GitHubSetting) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitHubSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitHubSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHubSetting) GetGithubUser() string {
	if x != nil {
		return x.GithubUser
	}
	return ""
}

func (x *GitHubSetting) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

func (x *GitHubSetting) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN_TYPE
}

func (x *GitHubSetting) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *GitHubSetting) GetTargetResource() string {
	if x != nil {
		return x.TargetResource
	}
	return ""
}

func (x *GitHubSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GitHubSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GitHubSetting) GetGitleaksSetting() *GitleaksSetting {
	if x != nil {
		return x.GitleaksSetting
	}
	return nil
}

func (x *GitHubSetting) GetDependencySetting() *DependencySetting {
	if x != nil {
		return x.DependencySetting
	}
	return nil
}

func (x *GitHubSetting) GetCodeScanSetting() *CodeScanSetting {
	if x != nil {
		return x.CodeScanSetting
	}
	return nil
}

// GitleaksSetting
type GitleaksSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	RepositoryPattern string `protobuf:"bytes,4,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
	ScanPublic        bool   `protobuf:"varint,5,opt,name=scan_public,json=scanPublic,proto3" json:"scan_public,omitempty"`
	ScanInternal      bool   `protobuf:"varint,6,opt,name=scan_internal,json=scanInternal,proto3" json:"scan_internal,omitempty"`
	ScanPrivate       bool   `protobuf:"varint,7,opt,name=scan_private,json=scanPrivate,proto3" json:"scan_private,omitempty"`
	Status            Status `protobuf:"varint,8,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,10,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt         int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GitleaksSetting) Reset() {
	*x = GitleaksSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitleaksSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitleaksSetting) ProtoMessage() {}

func (x *GitleaksSetting) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitleaksSetting.ProtoReflect.Descriptor instead.
func (*GitleaksSetting) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{2}
}

func (x *GitleaksSetting) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitleaksSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitleaksSetting) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *GitleaksSetting) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

func (x *GitleaksSetting) GetScanPublic() bool {
	if x != nil {
		return x.ScanPublic
	}
	return false
}

func (x *GitleaksSetting) GetScanInternal() bool {
	if x != nil {
		return x.ScanInternal
	}
	return false
}

func (x *GitleaksSetting) GetScanPrivate() bool {
	if x != nil {
		return x.ScanPrivate
	}
	return false
}

func (x *GitleaksSetting) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *GitleaksSetting) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *GitleaksSetting) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *GitleaksSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GitleaksSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// GitleaksCache
type GitleaksCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId    uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,2,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	ScanAt             int64  `protobuf:"varint,3,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt          int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GitleaksCache) Reset() {
	*x = GitleaksCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitleaksCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitleaksCache) ProtoMessage() {}

func (x *GitleaksCache) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitleaksCache.ProtoReflect.Descriptor instead.
func (*GitleaksCache) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{3}
}

func (x *GitleaksCache) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitleaksCache) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GitleaksCache) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *GitleaksCache) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GitleaksCache) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// DependencySetting
type DependencySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	Status            Status `protobuf:"varint,4,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,6,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt         int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RepositoryPattern string `protobuf:"bytes,9,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
}

func (x *DependencySetting) Reset() {
	*x = DependencySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencySetting) ProtoMessage() {}

func (x *DependencySetting) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencySetting.ProtoReflect.Descriptor instead.
func (*DependencySetting) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{4}
}

func (x *DependencySetting) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *DependencySetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DependencySetting) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *DependencySetting) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *DependencySetting) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DependencySetting) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *DependencySetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DependencySetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *DependencySetting) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

// CodeScanSetting
type CodeScanSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	RepositoryPattern string `protobuf:"bytes,4,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
	ScanPublic        bool   `protobuf:"varint,5,opt,name=scan_public,json=scanPublic,proto3" json:"scan_public,omitempty"`
	ScanInternal      bool   `protobuf:"varint,6,opt,name=scan_internal,json=scanInternal,proto3" json:"scan_internal,omitempty"`
	ScanPrivate       bool   `protobuf:"varint,7,opt,name=scan_private,json=scanPrivate,proto3" json:"scan_private,omitempty"`
	Status            Status `protobuf:"varint,8,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,10,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt         int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CodeScanSetting) Reset() {
	*x = CodeScanSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeScanSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeScanSetting) ProtoMessage() {}

func (x *CodeScanSetting) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeScanSetting.ProtoReflect.Descriptor instead.
func (*CodeScanSetting) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{5}
}

func (x *CodeScanSetting) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *CodeScanSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CodeScanSetting) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *CodeScanSetting) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

func (x *CodeScanSetting) GetScanPublic() bool {
	if x != nil {
		return x.ScanPublic
	}
	return false
}

func (x *CodeScanSetting) GetScanInternal() bool {
	if x != nil {
		return x.ScanInternal
	}
	return false
}

func (x *CodeScanSetting) GetScanPrivate() bool {
	if x != nil {
		return x.ScanPrivate
	}
	return false
}

func (x *CodeScanSetting) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *CodeScanSetting) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *CodeScanSetting) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *CodeScanSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CodeScanSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// GitHubSettingForUpsert
type GitHubSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId     uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId           uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name                string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	GithubUser          string `protobuf:"bytes,4,opt,name=github_user,json=githubUser,proto3" json:"github_user,omitempty"`
	PersonalAccessToken string `protobuf:"bytes,5,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
	Type                Type   `protobuf:"varint,6,opt,name=type,proto3,enum=datasource.code.Type" json:"type,omitempty"`
	BaseUrl             string `protobuf:"bytes,7,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	TargetResource      string `protobuf:"bytes,8,opt,name=target_resource,json=targetResource,proto3" json:"target_resource,omitempty"`
}

func (x *GitHubSettingForUpsert) Reset() {
	*x = GitHubSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubSettingForUpsert) ProtoMessage() {}

func (x *GitHubSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubSettingForUpsert.ProtoReflect.Descriptor instead.
func (*GitHubSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{6}
}

func (x *GitHubSettingForUpsert) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitHubSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitHubSettingForUpsert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHubSettingForUpsert) GetGithubUser() string {
	if x != nil {
		return x.GithubUser
	}
	return ""
}

func (x *GitHubSettingForUpsert) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

func (x *GitHubSettingForUpsert) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN_TYPE
}

func (x *GitHubSettingForUpsert) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *GitHubSettingForUpsert) GetTargetResource() string {
	if x != nil {
		return x.TargetResource
	}
	return ""
}

// GitleaksSettingForUpsert
type GitleaksSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	RepositoryPattern string `protobuf:"bytes,4,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
	ScanPublic        bool   `protobuf:"varint,5,opt,name=scan_public,json=scanPublic,proto3" json:"scan_public,omitempty"`
	ScanInternal      bool   `protobuf:"varint,6,opt,name=scan_internal,json=scanInternal,proto3" json:"scan_internal,omitempty"`
	ScanPrivate       bool   `protobuf:"varint,7,opt,name=scan_private,json=scanPrivate,proto3" json:"scan_private,omitempty"`
	Status            Status `protobuf:"varint,8,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,10,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *GitleaksSettingForUpsert) Reset() {
	*x = GitleaksSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitleaksSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitleaksSettingForUpsert) ProtoMessage() {}

func (x *GitleaksSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitleaksSettingForUpsert.ProtoReflect.Descriptor instead.
func (*GitleaksSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{7}
}

func (x *GitleaksSettingForUpsert) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitleaksSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GitleaksSettingForUpsert) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *GitleaksSettingForUpsert) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

func (x *GitleaksSettingForUpsert) GetScanPublic() bool {
	if x != nil {
		return x.ScanPublic
	}
	return false
}

func (x *GitleaksSettingForUpsert) GetScanInternal() bool {
	if x != nil {
		return x.ScanInternal
	}
	return false
}

func (x *GitleaksSettingForUpsert) GetScanPrivate() bool {
	if x != nil {
		return x.ScanPrivate
	}
	return false
}

func (x *GitleaksSettingForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *GitleaksSettingForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *GitleaksSettingForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

// GitleaksCacheForUpsert
type GitleaksCacheForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId    uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	RepositoryFullName string `protobuf:"bytes,2,opt,name=repository_full_name,json=repositoryFullName,proto3" json:"repository_full_name,omitempty"`
	ScanAt             int64  `protobuf:"varint,3,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *GitleaksCacheForUpsert) Reset() {
	*x = GitleaksCacheForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitleaksCacheForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitleaksCacheForUpsert) ProtoMessage() {}

func (x *GitleaksCacheForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitleaksCacheForUpsert.ProtoReflect.Descriptor instead.
func (*GitleaksCacheForUpsert) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{8}
}

func (x *GitleaksCacheForUpsert) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *GitleaksCacheForUpsert) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GitleaksCacheForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

// DependencySettingForUpsert
type DependencySettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	Status            Status `protobuf:"varint,4,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,6,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	RepositoryPattern string `protobuf:"bytes,7,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
}

func (x *DependencySettingForUpsert) Reset() {
	*x = DependencySettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencySettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencySettingForUpsert) ProtoMessage() {}

func (x *DependencySettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencySettingForUpsert.ProtoReflect.Descriptor instead.
func (*DependencySettingForUpsert) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{9}
}

func (x *DependencySettingForUpsert) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *DependencySettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DependencySettingForUpsert) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *DependencySettingForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *DependencySettingForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *DependencySettingForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *DependencySettingForUpsert) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

// CodeScanSettingForUpsert
type CodeScanSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubSettingId   uint32 `protobuf:"varint,1,opt,name=github_setting_id,json=githubSettingId,proto3" json:"github_setting_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CodeDataSourceId  uint32 `protobuf:"varint,3,opt,name=code_data_source_id,json=codeDataSourceId,proto3" json:"code_data_source_id,omitempty"`
	RepositoryPattern string `protobuf:"bytes,4,opt,name=repository_pattern,json=repositoryPattern,proto3" json:"repository_pattern,omitempty"`
	ScanPublic        bool   `protobuf:"varint,5,opt,name=scan_public,json=scanPublic,proto3" json:"scan_public,omitempty"`
	ScanInternal      bool   `protobuf:"varint,6,opt,name=scan_internal,json=scanInternal,proto3" json:"scan_internal,omitempty"`
	ScanPrivate       bool   `protobuf:"varint,7,opt,name=scan_private,json=scanPrivate,proto3" json:"scan_private,omitempty"`
	Status            Status `protobuf:"varint,8,opt,name=status,proto3,enum=datasource.code.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,9,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,10,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *CodeScanSettingForUpsert) Reset() {
	*x = CodeScanSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_code_entity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeScanSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeScanSettingForUpsert) ProtoMessage() {}

func (x *CodeScanSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_code_entity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeScanSettingForUpsert.ProtoReflect.Descriptor instead.
func (*CodeScanSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_code_entity_proto_rawDescGZIP(), []int{10}
}

func (x *CodeScanSettingForUpsert) GetGithubSettingId() uint32 {
	if x != nil {
		return x.GithubSettingId
	}
	return 0
}

func (x *CodeScanSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CodeScanSettingForUpsert) GetCodeDataSourceId() uint32 {
	if x != nil {
		return x.CodeDataSourceId
	}
	return 0
}

func (x *CodeScanSettingForUpsert) GetRepositoryPattern() string {
	if x != nil {
		return x.RepositoryPattern
	}
	return ""
}

func (x *CodeScanSettingForUpsert) GetScanPublic() bool {
	if x != nil {
		return x.ScanPublic
	}
	return false
}

func (x *CodeScanSettingForUpsert) GetScanInternal() bool {
	if x != nil {
		return x.ScanInternal
	}
	return false
}

func (x *CodeScanSettingForUpsert) GetScanPrivate() bool {
	if x != nil {
		return x.ScanPrivate
	}
	return false
}

func (x *CodeScanSettingForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *CodeScanSettingForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *CodeScanSettingForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

var File_code_entity_proto protoreflect.FileDescriptor

var file_code_entity_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xde, 0x04, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x67, 0x69,
	0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd0, 0x03, 0x0a, 0x0f, 0x47, 0x69, 0x74,
	0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0d,
	0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xd0,
	0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61,
	0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xbb, 0x02, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x9b, 0x03, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x16, 0x47, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x22,
	0xb4, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x9b, 0x03, 0x0a, 0x18, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6e, 0x41, 0x74, 0x2a, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_code_entity_proto_rawDescOnce sync.Once
	file_code_entity_proto_rawDescData = file_code_entity_proto_rawDesc
)

func file_code_entity_proto_rawDescGZIP() []byte {
	file_code_entity_proto_rawDescOnce.Do(func() {
		file_code_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_code_entity_proto_rawDescData)
	})
	return file_code_entity_proto_rawDescData
}

var file_code_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_code_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_code_entity_proto_goTypes = []interface{}{
	(Type)(0),                          // 0: datasource.code.Type
	(Status)(0),                        // 1: datasource.code.Status
	(*CodeDataSource)(nil),             // 2: datasource.code.CodeDataSource
	(*GitHubSetting)(nil),              // 3: datasource.code.GitHubSetting
	(*GitleaksSetting)(nil),            // 4: datasource.code.GitleaksSetting
	(*GitleaksCache)(nil),              // 5: datasource.code.GitleaksCache
	(*DependencySetting)(nil),          // 6: datasource.code.DependencySetting
	(*CodeScanSetting)(nil),            // 7: datasource.code.CodeScanSetting
	(*GitHubSettingForUpsert)(nil),     // 8: datasource.code.GitHubSettingForUpsert
	(*GitleaksSettingForUpsert)(nil),   // 9: datasource.code.GitleaksSettingForUpsert
	(*GitleaksCacheForUpsert)(nil),     // 10: datasource.code.GitleaksCacheForUpsert
	(*DependencySettingForUpsert)(nil), // 11: datasource.code.DependencySettingForUpsert
	(*CodeScanSettingForUpsert)(nil),   // 12: datasource.code.CodeScanSettingForUpsert
}
var file_code_entity_proto_depIdxs = []int32{
	0,  // 0: datasource.code.GitHubSetting.type:type_name -> datasource.code.Type
	4,  // 1: datasource.code.GitHubSetting.gitleaks_setting:type_name -> datasource.code.GitleaksSetting
	6,  // 2: datasource.code.GitHubSetting.dependency_setting:type_name -> datasource.code.DependencySetting
	7,  // 3: datasource.code.GitHubSetting.code_scan_setting:type_name -> datasource.code.CodeScanSetting
	1,  // 4: datasource.code.GitleaksSetting.status:type_name -> datasource.code.Status
	1,  // 5: datasource.code.DependencySetting.status:type_name -> datasource.code.Status
	1,  // 6: datasource.code.CodeScanSetting.status:type_name -> datasource.code.Status
	0,  // 7: datasource.code.GitHubSettingForUpsert.type:type_name -> datasource.code.Type
	1,  // 8: datasource.code.GitleaksSettingForUpsert.status:type_name -> datasource.code.Status
	1,  // 9: datasource.code.DependencySettingForUpsert.status:type_name -> datasource.code.Status
	1,  // 10: datasource.code.CodeScanSettingForUpsert.status:type_name -> datasource.code.Status
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_code_entity_proto_init() }
func file_code_entity_proto_init() {
	if File_code_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_code_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitleaksSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitleaksCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeScanSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitleaksSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitleaksCacheForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencySettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_code_entity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeScanSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_code_entity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_code_entity_proto_goTypes,
		DependencyIndexes: file_code_entity_proto_depIdxs,
		EnumInfos:         file_code_entity_proto_enumTypes,
		MessageInfos:      file_code_entity_proto_msgTypes,
	}.Build()
	File_code_entity_proto = out.File
	file_code_entity_proto_rawDesc = nil
	file_code_entity_proto_goTypes = nil
	file_code_entity_proto_depIdxs = nil
}
