// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	google "github.com/ca-risken/datasource-api/proto/google"
	mock "github.com/stretchr/testify/mock"
)

// GoogleServiceServer is an autogenerated mock type for the GoogleServiceServer type
type GoogleServiceServer struct {
	mock.Mock
}

// AttachGCPDataSource provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) AttachGCPDataSource(_a0 context.Context, _a1 *google.AttachGCPDataSourceRequest) (*google.AttachGCPDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.AttachGCPDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.AttachGCPDataSourceRequest) *google.AttachGCPDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.AttachGCPDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.AttachGCPDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGCP provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) DeleteGCP(_a0 context.Context, _a1 *google.DeleteGCPRequest) (*google.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *google.DeleteGCPRequest) *google.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.DeleteGCPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachGCPDataSource provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) DetachGCPDataSource(_a0 context.Context, _a1 *google.DetachGCPDataSourceRequest) (*google.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *google.DetachGCPDataSourceRequest) *google.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.DetachGCPDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCP provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) GetGCP(_a0 context.Context, _a1 *google.GetGCPRequest) (*google.GetGCPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.GetGCPResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPRequest) *google.GetGCPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.GetGCPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.GetGCPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCPDataSource provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) GetGCPDataSource(_a0 context.Context, _a1 *google.GetGCPDataSourceRequest) (*google.GetGCPDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.GetGCPDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPDataSourceRequest) *google.GetGCPDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.GetGCPDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.GetGCPDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) InvokeScanAll(_a0 context.Context, _a1 *google.InvokeScanAllRequest) (*google.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanAllRequest) *google.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.InvokeScanAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanGCP provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) InvokeScanGCP(_a0 context.Context, _a1 *google.InvokeScanGCPRequest) (*google.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanGCPRequest) *google.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.InvokeScanGCPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCP provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) ListGCP(_a0 context.Context, _a1 *google.ListGCPRequest) (*google.ListGCPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.ListGCPResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPRequest) *google.ListGCPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGCPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGCPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCPDataSource provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) ListGCPDataSource(_a0 context.Context, _a1 *google.ListGCPDataSourceRequest) (*google.ListGCPDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.ListGCPDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPDataSourceRequest) *google.ListGCPDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGCPDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGCPDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGoogleDataSource provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) ListGoogleDataSource(_a0 context.Context, _a1 *google.ListGoogleDataSourceRequest) (*google.ListGoogleDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.ListGoogleDataSourceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGoogleDataSourceRequest) *google.ListGoogleDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGoogleDataSourceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGoogleDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutGCP provides a mock function with given fields: _a0, _a1
func (_m *GoogleServiceServer) PutGCP(_a0 context.Context, _a1 *google.PutGCPRequest) (*google.PutGCPResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *google.PutGCPResponse
	if rf, ok := ret.Get(0).(func(context.Context, *google.PutGCPRequest) *google.PutGCPResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.PutGCPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *google.PutGCPRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGoogleServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoogleServiceServer creates a new instance of GoogleServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoogleServiceServer(t mockConstructorTestingTNewGoogleServiceServer) *GoogleServiceServer {
	mock := &GoogleServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
