// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	google "github.com/ca-risken/datasource-api/proto/google"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GoogleServiceClient is an autogenerated mock type for the GoogleServiceClient type
type GoogleServiceClient struct {
	mock.Mock
}

// AttachGCPDataSource provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) AttachGCPDataSource(ctx context.Context, in *google.AttachGCPDataSourceRequest, opts ...grpc.CallOption) (*google.AttachGCPDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachGCPDataSource")
	}

	var r0 *google.AttachGCPDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.AttachGCPDataSourceRequest, ...grpc.CallOption) (*google.AttachGCPDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.AttachGCPDataSourceRequest, ...grpc.CallOption) *google.AttachGCPDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.AttachGCPDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.AttachGCPDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGCP provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) DeleteGCP(ctx context.Context, in *google.DeleteGCPRequest, opts ...grpc.CallOption) (*google.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGCP")
	}

	var r0 *google.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.DeleteGCPRequest, ...grpc.CallOption) (*google.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.DeleteGCPRequest, ...grpc.CallOption) *google.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.DeleteGCPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachGCPDataSource provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) DetachGCPDataSource(ctx context.Context, in *google.DetachGCPDataSourceRequest, opts ...grpc.CallOption) (*google.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachGCPDataSource")
	}

	var r0 *google.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.DetachGCPDataSourceRequest, ...grpc.CallOption) (*google.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.DetachGCPDataSourceRequest, ...grpc.CallOption) *google.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.DetachGCPDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCP provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) GetGCP(ctx context.Context, in *google.GetGCPRequest, opts ...grpc.CallOption) (*google.GetGCPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGCP")
	}

	var r0 *google.GetGCPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPRequest, ...grpc.CallOption) (*google.GetGCPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPRequest, ...grpc.CallOption) *google.GetGCPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.GetGCPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.GetGCPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCPDataSource provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) GetGCPDataSource(ctx context.Context, in *google.GetGCPDataSourceRequest, opts ...grpc.CallOption) (*google.GetGCPDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGCPDataSource")
	}

	var r0 *google.GetGCPDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPDataSourceRequest, ...grpc.CallOption) (*google.GetGCPDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.GetGCPDataSourceRequest, ...grpc.CallOption) *google.GetGCPDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.GetGCPDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.GetGCPDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) InvokeScanAll(ctx context.Context, in *google.InvokeScanAllRequest, opts ...grpc.CallOption) (*google.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScanAll")
	}

	var r0 *google.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanAllRequest, ...grpc.CallOption) (*google.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanAllRequest, ...grpc.CallOption) *google.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.InvokeScanAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanGCP provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) InvokeScanGCP(ctx context.Context, in *google.InvokeScanGCPRequest, opts ...grpc.CallOption) (*google.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScanGCP")
	}

	var r0 *google.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanGCPRequest, ...grpc.CallOption) (*google.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.InvokeScanGCPRequest, ...grpc.CallOption) *google.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.InvokeScanGCPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCP provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) ListGCP(ctx context.Context, in *google.ListGCPRequest, opts ...grpc.CallOption) (*google.ListGCPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGCP")
	}

	var r0 *google.ListGCPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPRequest, ...grpc.CallOption) (*google.ListGCPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPRequest, ...grpc.CallOption) *google.ListGCPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGCPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGCPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCPDataSource provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) ListGCPDataSource(ctx context.Context, in *google.ListGCPDataSourceRequest, opts ...grpc.CallOption) (*google.ListGCPDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGCPDataSource")
	}

	var r0 *google.ListGCPDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPDataSourceRequest, ...grpc.CallOption) (*google.ListGCPDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGCPDataSourceRequest, ...grpc.CallOption) *google.ListGCPDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGCPDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGCPDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGoogleDataSource provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) ListGoogleDataSource(ctx context.Context, in *google.ListGoogleDataSourceRequest, opts ...grpc.CallOption) (*google.ListGoogleDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGoogleDataSource")
	}

	var r0 *google.ListGoogleDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGoogleDataSourceRequest, ...grpc.CallOption) (*google.ListGoogleDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.ListGoogleDataSourceRequest, ...grpc.CallOption) *google.ListGoogleDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.ListGoogleDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.ListGoogleDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutGCP provides a mock function with given fields: ctx, in, opts
func (_m *GoogleServiceClient) PutGCP(ctx context.Context, in *google.PutGCPRequest, opts ...grpc.CallOption) (*google.PutGCPResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutGCP")
	}

	var r0 *google.PutGCPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *google.PutGCPRequest, ...grpc.CallOption) (*google.PutGCPResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *google.PutGCPRequest, ...grpc.CallOption) *google.PutGCPResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.PutGCPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *google.PutGCPRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGoogleServiceClient creates a new instance of GoogleServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleServiceClient {
	mock := &GoogleServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
