// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: azure/service.proto

package azure

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAzureDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAzureDataSourceRequestMultiError, or nil if none found.
func (m *ListAzureDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAzureDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureDataSourceId

	if l := utf8.RuneCountInString(m.GetName()); l < 0 || l > 64 {
		err := ListAzureDataSourceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 0 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAzureDataSourceRequestMultiError(errors)
	}

	return nil
}

// ListAzureDataSourceRequestMultiError is an error wrapping multiple
// validation errors returned by ListAzureDataSourceRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAzureDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAzureDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAzureDataSourceRequestMultiError) AllErrors() []error { return m }

// ListAzureDataSourceRequestValidationError is the validation error returned
// by ListAzureDataSourceRequest.Validate if the designated constraints aren't met.
type ListAzureDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAzureDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAzureDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAzureDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAzureDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAzureDataSourceRequestValidationError) ErrorName() string {
	return "ListAzureDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAzureDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAzureDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAzureDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAzureDataSourceRequestValidationError{}

// Validate checks the field values on ListAzureDataSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAzureDataSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAzureDataSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAzureDataSourceResponseMultiError, or nil if none found.
func (m *ListAzureDataSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAzureDataSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAzureDataSource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAzureDataSourceResponseValidationError{
						field:  fmt.Sprintf("AzureDataSource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAzureDataSourceResponseValidationError{
						field:  fmt.Sprintf("AzureDataSource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAzureDataSourceResponseValidationError{
					field:  fmt.Sprintf("AzureDataSource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAzureDataSourceResponseMultiError(errors)
	}

	return nil
}

// ListAzureDataSourceResponseMultiError is an error wrapping multiple
// validation errors returned by ListAzureDataSourceResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAzureDataSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAzureDataSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAzureDataSourceResponseMultiError) AllErrors() []error { return m }

// ListAzureDataSourceResponseValidationError is the validation error returned
// by ListAzureDataSourceResponse.Validate if the designated constraints
// aren't met.
type ListAzureDataSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAzureDataSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAzureDataSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAzureDataSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAzureDataSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAzureDataSourceResponseValidationError) ErrorName() string {
	return "ListAzureDataSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAzureDataSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAzureDataSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAzureDataSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAzureDataSourceResponseValidationError{}

// Validate checks the field values on ListAzureRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAzureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAzureRequestMultiError, or nil if none found.
func (m *ListAzureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAzureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ListAzureRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AzureId

	if l := utf8.RuneCountInString(m.GetSubscriptionId()); l < 0 || l > 128 {
		err := ListAzureRequestValidationError{
			field:  "SubscriptionId",
			reason: "value length must be between 0 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAzureRequestMultiError(errors)
	}

	return nil
}

// ListAzureRequestMultiError is an error wrapping multiple validation errors
// returned by ListAzureRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAzureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAzureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAzureRequestMultiError) AllErrors() []error { return m }

// ListAzureRequestValidationError is the validation error returned by
// ListAzureRequest.Validate if the designated constraints aren't met.
type ListAzureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAzureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAzureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAzureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAzureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAzureRequestValidationError) ErrorName() string { return "ListAzureRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAzureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAzureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAzureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAzureRequestValidationError{}

// Validate checks the field values on ListAzureResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAzureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAzureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAzureResponseMultiError, or nil if none found.
func (m *ListAzureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAzureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAzure() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAzureResponseValidationError{
						field:  fmt.Sprintf("Azure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAzureResponseValidationError{
						field:  fmt.Sprintf("Azure[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAzureResponseValidationError{
					field:  fmt.Sprintf("Azure[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAzureResponseMultiError(errors)
	}

	return nil
}

// ListAzureResponseMultiError is an error wrapping multiple validation errors
// returned by ListAzureResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAzureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAzureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAzureResponseMultiError) AllErrors() []error { return m }

// ListAzureResponseValidationError is the validation error returned by
// ListAzureResponse.Validate if the designated constraints aren't met.
type ListAzureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAzureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAzureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAzureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAzureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAzureResponseValidationError) ErrorName() string {
	return "ListAzureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAzureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAzureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAzureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAzureResponseValidationError{}

// Validate checks the field values on GetAzureRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAzureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAzureRequestMultiError, or nil if none found.
func (m *GetAzureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAzureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := GetAzureRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureId() <= 0 {
		err := GetAzureRequestValidationError{
			field:  "AzureId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAzureRequestMultiError(errors)
	}

	return nil
}

// GetAzureRequestMultiError is an error wrapping multiple validation errors
// returned by GetAzureRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAzureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAzureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAzureRequestMultiError) AllErrors() []error { return m }

// GetAzureRequestValidationError is the validation error returned by
// GetAzureRequest.Validate if the designated constraints aren't met.
type GetAzureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAzureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAzureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAzureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAzureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAzureRequestValidationError) ErrorName() string { return "GetAzureRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAzureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAzureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAzureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAzureRequestValidationError{}

// Validate checks the field values on GetAzureResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAzureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAzureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAzureResponseMultiError, or nil if none found.
func (m *GetAzureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAzureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAzure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAzureResponseValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAzureResponseValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAzure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAzureResponseValidationError{
				field:  "Azure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAzureResponseMultiError(errors)
	}

	return nil
}

// GetAzureResponseMultiError is an error wrapping multiple validation errors
// returned by GetAzureResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAzureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAzureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAzureResponseMultiError) AllErrors() []error { return m }

// GetAzureResponseValidationError is the validation error returned by
// GetAzureResponse.Validate if the designated constraints aren't met.
type GetAzureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAzureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAzureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAzureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAzureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAzureResponseValidationError) ErrorName() string { return "GetAzureResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAzureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAzureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAzureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAzureResponseValidationError{}

// Validate checks the field values on PutAzureRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutAzureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutAzureRequestMultiError, or nil if none found.
func (m *PutAzureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutAzureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := PutAzureRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzure() == nil {
		err := PutAzureRequestValidationError{
			field:  "Azure",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAzure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutAzureRequestValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutAzureRequestValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAzure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutAzureRequestValidationError{
				field:  "Azure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutAzureRequestMultiError(errors)
	}

	return nil
}

// PutAzureRequestMultiError is an error wrapping multiple validation errors
// returned by PutAzureRequest.ValidateAll() if the designated constraints
// aren't met.
type PutAzureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutAzureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutAzureRequestMultiError) AllErrors() []error { return m }

// PutAzureRequestValidationError is the validation error returned by
// PutAzureRequest.Validate if the designated constraints aren't met.
type PutAzureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutAzureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutAzureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutAzureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutAzureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutAzureRequestValidationError) ErrorName() string { return "PutAzureRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutAzureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutAzureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutAzureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutAzureRequestValidationError{}

// Validate checks the field values on PutAzureResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutAzureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutAzureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutAzureResponseMultiError, or nil if none found.
func (m *PutAzureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutAzureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAzure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutAzureResponseValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutAzureResponseValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAzure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutAzureResponseValidationError{
				field:  "Azure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutAzureResponseMultiError(errors)
	}

	return nil
}

// PutAzureResponseMultiError is an error wrapping multiple validation errors
// returned by PutAzureResponse.ValidateAll() if the designated constraints
// aren't met.
type PutAzureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutAzureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutAzureResponseMultiError) AllErrors() []error { return m }

// PutAzureResponseValidationError is the validation error returned by
// PutAzureResponse.Validate if the designated constraints aren't met.
type PutAzureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutAzureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutAzureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutAzureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutAzureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutAzureResponseValidationError) ErrorName() string { return "PutAzureResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutAzureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutAzureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutAzureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutAzureResponseValidationError{}

// Validate checks the field values on DeleteAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAzureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAzureRequestMultiError, or nil if none found.
func (m *DeleteAzureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAzureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := DeleteAzureRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureId() <= 0 {
		err := DeleteAzureRequestValidationError{
			field:  "AzureId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAzureRequestMultiError(errors)
	}

	return nil
}

// DeleteAzureRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAzureRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAzureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAzureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAzureRequestMultiError) AllErrors() []error { return m }

// DeleteAzureRequestValidationError is the validation error returned by
// DeleteAzureRequest.Validate if the designated constraints aren't met.
type DeleteAzureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAzureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAzureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAzureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAzureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAzureRequestValidationError) ErrorName() string {
	return "DeleteAzureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAzureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAzureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAzureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAzureRequestValidationError{}

// Validate checks the field values on ListRelAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRelAzureDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRelAzureDataSourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRelAzureDataSourceRequestMultiError, or nil if none found.
func (m *ListRelAzureDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRelAzureDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ListRelAzureDataSourceRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AzureId

	if len(errors) > 0 {
		return ListRelAzureDataSourceRequestMultiError(errors)
	}

	return nil
}

// ListRelAzureDataSourceRequestMultiError is an error wrapping multiple
// validation errors returned by ListRelAzureDataSourceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListRelAzureDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRelAzureDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRelAzureDataSourceRequestMultiError) AllErrors() []error { return m }

// ListRelAzureDataSourceRequestValidationError is the validation error
// returned by ListRelAzureDataSourceRequest.Validate if the designated
// constraints aren't met.
type ListRelAzureDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelAzureDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelAzureDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelAzureDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelAzureDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelAzureDataSourceRequestValidationError) ErrorName() string {
	return "ListRelAzureDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelAzureDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelAzureDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelAzureDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelAzureDataSourceRequestValidationError{}

// Validate checks the field values on ListRelAzureDataSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRelAzureDataSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRelAzureDataSourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRelAzureDataSourceResponseMultiError, or nil if none found.
func (m *ListRelAzureDataSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRelAzureDataSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelAzureDataSource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRelAzureDataSourceResponseValidationError{
						field:  fmt.Sprintf("RelAzureDataSource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRelAzureDataSourceResponseValidationError{
						field:  fmt.Sprintf("RelAzureDataSource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRelAzureDataSourceResponseValidationError{
					field:  fmt.Sprintf("RelAzureDataSource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRelAzureDataSourceResponseMultiError(errors)
	}

	return nil
}

// ListRelAzureDataSourceResponseMultiError is an error wrapping multiple
// validation errors returned by ListRelAzureDataSourceResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRelAzureDataSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRelAzureDataSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRelAzureDataSourceResponseMultiError) AllErrors() []error { return m }

// ListRelAzureDataSourceResponseValidationError is the validation error
// returned by ListRelAzureDataSourceResponse.Validate if the designated
// constraints aren't met.
type ListRelAzureDataSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelAzureDataSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelAzureDataSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelAzureDataSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelAzureDataSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelAzureDataSourceResponseValidationError) ErrorName() string {
	return "ListRelAzureDataSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelAzureDataSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelAzureDataSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelAzureDataSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelAzureDataSourceResponseValidationError{}

// Validate checks the field values on GetRelAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelAzureDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRelAzureDataSourceRequestMultiError, or nil if none found.
func (m *GetRelAzureDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelAzureDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := GetRelAzureDataSourceRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureId() <= 0 {
		err := GetRelAzureDataSourceRequestValidationError{
			field:  "AzureId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureDataSourceId() <= 0 {
		err := GetRelAzureDataSourceRequestValidationError{
			field:  "AzureDataSourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRelAzureDataSourceRequestMultiError(errors)
	}

	return nil
}

// GetRelAzureDataSourceRequestMultiError is an error wrapping multiple
// validation errors returned by GetRelAzureDataSourceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetRelAzureDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelAzureDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelAzureDataSourceRequestMultiError) AllErrors() []error { return m }

// GetRelAzureDataSourceRequestValidationError is the validation error returned
// by GetRelAzureDataSourceRequest.Validate if the designated constraints
// aren't met.
type GetRelAzureDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelAzureDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelAzureDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelAzureDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelAzureDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelAzureDataSourceRequestValidationError) ErrorName() string {
	return "GetRelAzureDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelAzureDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelAzureDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelAzureDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelAzureDataSourceRequestValidationError{}

// Validate checks the field values on GetRelAzureDataSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRelAzureDataSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRelAzureDataSourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRelAzureDataSourceResponseMultiError, or nil if none found.
func (m *GetRelAzureDataSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRelAzureDataSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelAzureDataSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRelAzureDataSourceResponseValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRelAzureDataSourceResponseValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelAzureDataSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRelAzureDataSourceResponseValidationError{
				field:  "RelAzureDataSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRelAzureDataSourceResponseMultiError(errors)
	}

	return nil
}

// GetRelAzureDataSourceResponseMultiError is an error wrapping multiple
// validation errors returned by GetRelAzureDataSourceResponse.ValidateAll()
// if the designated constraints aren't met.
type GetRelAzureDataSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRelAzureDataSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRelAzureDataSourceResponseMultiError) AllErrors() []error { return m }

// GetRelAzureDataSourceResponseValidationError is the validation error
// returned by GetRelAzureDataSourceResponse.Validate if the designated
// constraints aren't met.
type GetRelAzureDataSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelAzureDataSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelAzureDataSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelAzureDataSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelAzureDataSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelAzureDataSourceResponseValidationError) ErrorName() string {
	return "GetRelAzureDataSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelAzureDataSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelAzureDataSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelAzureDataSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelAzureDataSourceResponseValidationError{}

// Validate checks the field values on AttachRelAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttachRelAzureDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachRelAzureDataSourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttachRelAzureDataSourceRequestMultiError, or nil if none found.
func (m *AttachRelAzureDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachRelAzureDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := AttachRelAzureDataSourceRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRelAzureDataSource() == nil {
		err := AttachRelAzureDataSourceRequestValidationError{
			field:  "RelAzureDataSource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRelAzureDataSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachRelAzureDataSourceRequestValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachRelAzureDataSourceRequestValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelAzureDataSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachRelAzureDataSourceRequestValidationError{
				field:  "RelAzureDataSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttachRelAzureDataSourceRequestMultiError(errors)
	}

	return nil
}

// AttachRelAzureDataSourceRequestMultiError is an error wrapping multiple
// validation errors returned by AttachRelAzureDataSourceRequest.ValidateAll()
// if the designated constraints aren't met.
type AttachRelAzureDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachRelAzureDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachRelAzureDataSourceRequestMultiError) AllErrors() []error { return m }

// AttachRelAzureDataSourceRequestValidationError is the validation error
// returned by AttachRelAzureDataSourceRequest.Validate if the designated
// constraints aren't met.
type AttachRelAzureDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachRelAzureDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachRelAzureDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachRelAzureDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachRelAzureDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachRelAzureDataSourceRequestValidationError) ErrorName() string {
	return "AttachRelAzureDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttachRelAzureDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachRelAzureDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachRelAzureDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachRelAzureDataSourceRequestValidationError{}

// Validate checks the field values on AttachRelAzureDataSourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AttachRelAzureDataSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachRelAzureDataSourceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttachRelAzureDataSourceResponseMultiError, or nil if none found.
func (m *AttachRelAzureDataSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachRelAzureDataSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelAzureDataSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachRelAzureDataSourceResponseValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachRelAzureDataSourceResponseValidationError{
					field:  "RelAzureDataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelAzureDataSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachRelAzureDataSourceResponseValidationError{
				field:  "RelAzureDataSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttachRelAzureDataSourceResponseMultiError(errors)
	}

	return nil
}

// AttachRelAzureDataSourceResponseMultiError is an error wrapping multiple
// validation errors returned by
// AttachRelAzureDataSourceResponse.ValidateAll() if the designated
// constraints aren't met.
type AttachRelAzureDataSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachRelAzureDataSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachRelAzureDataSourceResponseMultiError) AllErrors() []error { return m }

// AttachRelAzureDataSourceResponseValidationError is the validation error
// returned by AttachRelAzureDataSourceResponse.Validate if the designated
// constraints aren't met.
type AttachRelAzureDataSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachRelAzureDataSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachRelAzureDataSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachRelAzureDataSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachRelAzureDataSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachRelAzureDataSourceResponseValidationError) ErrorName() string {
	return "AttachRelAzureDataSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttachRelAzureDataSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachRelAzureDataSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachRelAzureDataSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachRelAzureDataSourceResponseValidationError{}

// Validate checks the field values on DetachRelAzureDataSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetachRelAzureDataSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetachRelAzureDataSourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DetachRelAzureDataSourceRequestMultiError, or nil if none found.
func (m *DetachRelAzureDataSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetachRelAzureDataSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := DetachRelAzureDataSourceRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureId() <= 0 {
		err := DetachRelAzureDataSourceRequestValidationError{
			field:  "AzureId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureDataSourceId() <= 0 {
		err := DetachRelAzureDataSourceRequestValidationError{
			field:  "AzureDataSourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DetachRelAzureDataSourceRequestMultiError(errors)
	}

	return nil
}

// DetachRelAzureDataSourceRequestMultiError is an error wrapping multiple
// validation errors returned by DetachRelAzureDataSourceRequest.ValidateAll()
// if the designated constraints aren't met.
type DetachRelAzureDataSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetachRelAzureDataSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetachRelAzureDataSourceRequestMultiError) AllErrors() []error { return m }

// DetachRelAzureDataSourceRequestValidationError is the validation error
// returned by DetachRelAzureDataSourceRequest.Validate if the designated
// constraints aren't met.
type DetachRelAzureDataSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetachRelAzureDataSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetachRelAzureDataSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetachRelAzureDataSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetachRelAzureDataSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetachRelAzureDataSourceRequestValidationError) ErrorName() string {
	return "DetachRelAzureDataSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetachRelAzureDataSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetachRelAzureDataSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetachRelAzureDataSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetachRelAzureDataSourceRequestValidationError{}

// Validate checks the field values on InvokeScanAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvokeScanAzureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvokeScanAzureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvokeScanAzureRequestMultiError, or nil if none found.
func (m *InvokeScanAzureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvokeScanAzureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := InvokeScanAzureRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureId() <= 0 {
		err := InvokeScanAzureRequestValidationError{
			field:  "AzureId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAzureDataSourceId() <= 0 {
		err := InvokeScanAzureRequestValidationError{
			field:  "AzureDataSourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ScanOnly

	if len(errors) > 0 {
		return InvokeScanAzureRequestMultiError(errors)
	}

	return nil
}

// InvokeScanAzureRequestMultiError is an error wrapping multiple validation
// errors returned by InvokeScanAzureRequest.ValidateAll() if the designated
// constraints aren't met.
type InvokeScanAzureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvokeScanAzureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvokeScanAzureRequestMultiError) AllErrors() []error { return m }

// InvokeScanAzureRequestValidationError is the validation error returned by
// InvokeScanAzureRequest.Validate if the designated constraints aren't met.
type InvokeScanAzureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvokeScanAzureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvokeScanAzureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvokeScanAzureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvokeScanAzureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvokeScanAzureRequestValidationError) ErrorName() string {
	return "InvokeScanAzureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvokeScanAzureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvokeScanAzureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvokeScanAzureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvokeScanAzureRequestValidationError{}

// Validate checks the field values on InvokeScanAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvokeScanAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvokeScanAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvokeScanAllRequestMultiError, or nil if none found.
func (m *InvokeScanAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvokeScanAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureDataSourceId

	if len(errors) > 0 {
		return InvokeScanAllRequestMultiError(errors)
	}

	return nil
}

// InvokeScanAllRequestMultiError is an error wrapping multiple validation
// errors returned by InvokeScanAllRequest.ValidateAll() if the designated
// constraints aren't met.
type InvokeScanAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvokeScanAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvokeScanAllRequestMultiError) AllErrors() []error { return m }

// InvokeScanAllRequestValidationError is the validation error returned by
// InvokeScanAllRequest.Validate if the designated constraints aren't met.
type InvokeScanAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvokeScanAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvokeScanAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvokeScanAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvokeScanAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvokeScanAllRequestValidationError) ErrorName() string {
	return "InvokeScanAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvokeScanAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvokeScanAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvokeScanAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvokeScanAllRequestValidationError{}
