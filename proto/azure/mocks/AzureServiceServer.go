// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	azure "github.com/ca-risken/datasource-api/proto/azure"

	mock "github.com/stretchr/testify/mock"
)

// AzureServiceServer is an autogenerated mock type for the AzureServiceServer type
type AzureServiceServer struct {
	mock.Mock
}

// AttachRelAzureDataSource provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) AttachRelAzureDataSource(_a0 context.Context, _a1 *azure.AttachRelAzureDataSourceRequest) (*azure.AttachRelAzureDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AttachRelAzureDataSource")
	}

	var r0 *azure.AttachRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AttachRelAzureDataSourceRequest) (*azure.AttachRelAzureDataSourceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AttachRelAzureDataSourceRequest) *azure.AttachRelAzureDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.AttachRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.AttachRelAzureDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAzure provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) DeleteAzure(_a0 context.Context, _a1 *azure.DeleteAzureRequest) (*azure.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAzure")
	}

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DeleteAzureRequest) (*azure.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DeleteAzureRequest) *azure.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.DeleteAzureRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachRelAzureDataSource provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) DetachRelAzureDataSource(_a0 context.Context, _a1 *azure.DetachRelAzureDataSourceRequest) (*azure.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DetachRelAzureDataSource")
	}

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DetachRelAzureDataSourceRequest) (*azure.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DetachRelAzureDataSourceRequest) *azure.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.DetachRelAzureDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAzure provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) GetAzure(_a0 context.Context, _a1 *azure.GetAzureRequest) (*azure.GetAzureResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAzure")
	}

	var r0 *azure.GetAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetAzureRequest) (*azure.GetAzureResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetAzureRequest) *azure.GetAzureResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.GetAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.GetAzureRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelAzureDataSource provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) GetRelAzureDataSource(_a0 context.Context, _a1 *azure.GetRelAzureDataSourceRequest) (*azure.GetRelAzureDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRelAzureDataSource")
	}

	var r0 *azure.GetRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetRelAzureDataSourceRequest) (*azure.GetRelAzureDataSourceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetRelAzureDataSourceRequest) *azure.GetRelAzureDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.GetRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.GetRelAzureDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) InvokeScanAll(_a0 context.Context, _a1 *azure.InvokeScanAllRequest) (*azure.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScanAll")
	}

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAllRequest) (*azure.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAllRequest) *azure.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.InvokeScanAllRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAzure provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) InvokeScanAzure(_a0 context.Context, _a1 *azure.InvokeScanAzureRequest) (*azure.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScanAzure")
	}

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAzureRequest) (*azure.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAzureRequest) *azure.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.InvokeScanAzureRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzure provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) ListAzure(_a0 context.Context, _a1 *azure.ListAzureRequest) (*azure.ListAzureResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAzure")
	}

	var r0 *azure.ListAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureRequest) (*azure.ListAzureResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureRequest) *azure.ListAzureResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListAzureRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzureDataSource provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) ListAzureDataSource(_a0 context.Context, _a1 *azure.ListAzureDataSourceRequest) (*azure.ListAzureDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAzureDataSource")
	}

	var r0 *azure.ListAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureDataSourceRequest) (*azure.ListAzureDataSourceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureDataSourceRequest) *azure.ListAzureDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListAzureDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelAzureDataSource provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) ListRelAzureDataSource(_a0 context.Context, _a1 *azure.ListRelAzureDataSourceRequest) (*azure.ListRelAzureDataSourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListRelAzureDataSource")
	}

	var r0 *azure.ListRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListRelAzureDataSourceRequest) (*azure.ListRelAzureDataSourceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListRelAzureDataSourceRequest) *azure.ListRelAzureDataSourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListRelAzureDataSourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAzure provides a mock function with given fields: _a0, _a1
func (_m *AzureServiceServer) PutAzure(_a0 context.Context, _a1 *azure.PutAzureRequest) (*azure.PutAzureResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PutAzure")
	}

	var r0 *azure.PutAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.PutAzureRequest) (*azure.PutAzureResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.PutAzureRequest) *azure.PutAzureResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.PutAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.PutAzureRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAzureServiceServer creates a new instance of AzureServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureServiceServer {
	mock := &AzureServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
