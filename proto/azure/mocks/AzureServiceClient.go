// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	azure "github.com/ca-risken/datasource-api/proto/azure"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AzureServiceClient is an autogenerated mock type for the AzureServiceClient type
type AzureServiceClient struct {
	mock.Mock
}

// AttachRelAzureDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) AttachRelAzureDataSource(ctx context.Context, in *azure.AttachRelAzureDataSourceRequest, opts ...grpc.CallOption) (*azure.AttachRelAzureDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.AttachRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AttachRelAzureDataSourceRequest, ...grpc.CallOption) (*azure.AttachRelAzureDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.AttachRelAzureDataSourceRequest, ...grpc.CallOption) *azure.AttachRelAzureDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.AttachRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.AttachRelAzureDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAzure provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) DeleteAzure(ctx context.Context, in *azure.DeleteAzureRequest, opts ...grpc.CallOption) (*azure.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DeleteAzureRequest, ...grpc.CallOption) (*azure.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DeleteAzureRequest, ...grpc.CallOption) *azure.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.DeleteAzureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachRelAzureDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) DetachRelAzureDataSource(ctx context.Context, in *azure.DetachRelAzureDataSourceRequest, opts ...grpc.CallOption) (*azure.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DetachRelAzureDataSourceRequest, ...grpc.CallOption) (*azure.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.DetachRelAzureDataSourceRequest, ...grpc.CallOption) *azure.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.DetachRelAzureDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAzure provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) GetAzure(ctx context.Context, in *azure.GetAzureRequest, opts ...grpc.CallOption) (*azure.GetAzureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.GetAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetAzureRequest, ...grpc.CallOption) (*azure.GetAzureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetAzureRequest, ...grpc.CallOption) *azure.GetAzureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.GetAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.GetAzureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelAzureDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) GetRelAzureDataSource(ctx context.Context, in *azure.GetRelAzureDataSourceRequest, opts ...grpc.CallOption) (*azure.GetRelAzureDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.GetRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetRelAzureDataSourceRequest, ...grpc.CallOption) (*azure.GetRelAzureDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.GetRelAzureDataSourceRequest, ...grpc.CallOption) *azure.GetRelAzureDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.GetRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.GetRelAzureDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAll provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) InvokeScanAll(ctx context.Context, in *azure.InvokeScanAllRequest, opts ...grpc.CallOption) (*azure.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAllRequest, ...grpc.CallOption) (*azure.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAllRequest, ...grpc.CallOption) *azure.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.InvokeScanAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScanAzure provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) InvokeScanAzure(ctx context.Context, in *azure.InvokeScanAzureRequest, opts ...grpc.CallOption) (*azure.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAzureRequest, ...grpc.CallOption) (*azure.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.InvokeScanAzureRequest, ...grpc.CallOption) *azure.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.InvokeScanAzureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzure provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) ListAzure(ctx context.Context, in *azure.ListAzureRequest, opts ...grpc.CallOption) (*azure.ListAzureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.ListAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureRequest, ...grpc.CallOption) (*azure.ListAzureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureRequest, ...grpc.CallOption) *azure.ListAzureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListAzureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAzureDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) ListAzureDataSource(ctx context.Context, in *azure.ListAzureDataSourceRequest, opts ...grpc.CallOption) (*azure.ListAzureDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.ListAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureDataSourceRequest, ...grpc.CallOption) (*azure.ListAzureDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListAzureDataSourceRequest, ...grpc.CallOption) *azure.ListAzureDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListAzureDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelAzureDataSource provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) ListRelAzureDataSource(ctx context.Context, in *azure.ListRelAzureDataSourceRequest, opts ...grpc.CallOption) (*azure.ListRelAzureDataSourceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.ListRelAzureDataSourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListRelAzureDataSourceRequest, ...grpc.CallOption) (*azure.ListRelAzureDataSourceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.ListRelAzureDataSourceRequest, ...grpc.CallOption) *azure.ListRelAzureDataSourceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.ListRelAzureDataSourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.ListRelAzureDataSourceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAzure provides a mock function with given fields: ctx, in, opts
func (_m *AzureServiceClient) PutAzure(ctx context.Context, in *azure.PutAzureRequest, opts ...grpc.CallOption) (*azure.PutAzureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *azure.PutAzureResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *azure.PutAzureRequest, ...grpc.CallOption) (*azure.PutAzureResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *azure.PutAzureRequest, ...grpc.CallOption) *azure.PutAzureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azure.PutAzureResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *azure.PutAzureRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAzureServiceClient creates a new instance of AzureServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureServiceClient {
	mock := &AzureServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
