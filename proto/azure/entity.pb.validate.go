// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: azure/entity.proto

package azure

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on AzureDataSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AzureDataSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AzureDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AzureDataSourceMultiError, or nil if none found.
func (m *AzureDataSource) ValidateAll() error {
	return m.validate(true)
}

func (m *AzureDataSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureDataSourceId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MaxScore

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AzureDataSourceMultiError(errors)
	}

	return nil
}

// AzureDataSourceMultiError is an error wrapping multiple validation errors
// returned by AzureDataSource.ValidateAll() if the designated constraints
// aren't met.
type AzureDataSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureDataSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureDataSourceMultiError) AllErrors() []error { return m }

// AzureDataSourceValidationError is the validation error returned by
// AzureDataSource.Validate if the designated constraints aren't met.
type AzureDataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureDataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureDataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureDataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureDataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureDataSourceValidationError) ErrorName() string { return "AzureDataSourceValidationError" }

// Error satisfies the builtin error interface
func (e AzureDataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzureDataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureDataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureDataSourceValidationError{}

// Validate checks the field values on Azure with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Azure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Azure with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AzureMultiError, or nil if none found.
func (m *Azure) ValidateAll() error {
	return m.validate(true)
}

func (m *Azure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureId

	// no validation rules for Name

	// no validation rules for ProjectId

	// no validation rules for SubscriptionId

	// no validation rules for VerificationCode

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AzureMultiError(errors)
	}

	return nil
}

// AzureMultiError is an error wrapping multiple validation errors returned by
// Azure.ValidateAll() if the designated constraints aren't met.
type AzureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureMultiError) AllErrors() []error { return m }

// AzureValidationError is the validation error returned by Azure.Validate if
// the designated constraints aren't met.
type AzureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureValidationError) ErrorName() string { return "AzureValidationError" }

// Error satisfies the builtin error interface
func (e AzureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureValidationError{}

// Validate checks the field values on RelAzureDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelAzureDataSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelAzureDataSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelAzureDataSourceMultiError, or nil if none found.
func (m *RelAzureDataSource) ValidateAll() error {
	return m.validate(true)
}

func (m *RelAzureDataSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureId

	// no validation rules for AzureDataSourceId

	// no validation rules for ProjectId

	// no validation rules for Status

	// no validation rules for StatusDetail

	// no validation rules for ScanAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for SubscriptionId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for MaxScore

	// no validation rules for SpecificVersion

	if len(errors) > 0 {
		return RelAzureDataSourceMultiError(errors)
	}

	return nil
}

// RelAzureDataSourceMultiError is an error wrapping multiple validation errors
// returned by RelAzureDataSource.ValidateAll() if the designated constraints
// aren't met.
type RelAzureDataSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelAzureDataSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelAzureDataSourceMultiError) AllErrors() []error { return m }

// RelAzureDataSourceValidationError is the validation error returned by
// RelAzureDataSource.Validate if the designated constraints aren't met.
type RelAzureDataSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelAzureDataSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelAzureDataSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelAzureDataSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelAzureDataSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelAzureDataSourceValidationError) ErrorName() string {
	return "RelAzureDataSourceValidationError"
}

// Error satisfies the builtin error interface
func (e RelAzureDataSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelAzureDataSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelAzureDataSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelAzureDataSourceValidationError{}

// Validate checks the field values on AzureForUpsert with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AzureForUpsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AzureForUpsert with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AzureForUpsertMultiError,
// or nil if none found.
func (m *AzureForUpsert) ValidateAll() error {
	return m.validate(true)
}

func (m *AzureForUpsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureId

	// no validation rules for Name

	// no validation rules for ProjectId

	// no validation rules for SubscriptionId

	// no validation rules for VerificationCode

	if len(errors) > 0 {
		return AzureForUpsertMultiError(errors)
	}

	return nil
}

// AzureForUpsertMultiError is an error wrapping multiple validation errors
// returned by AzureForUpsert.ValidateAll() if the designated constraints
// aren't met.
type AzureForUpsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureForUpsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureForUpsertMultiError) AllErrors() []error { return m }

// AzureForUpsertValidationError is the validation error returned by
// AzureForUpsert.Validate if the designated constraints aren't met.
type AzureForUpsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureForUpsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureForUpsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureForUpsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureForUpsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureForUpsertValidationError) ErrorName() string { return "AzureForUpsertValidationError" }

// Error satisfies the builtin error interface
func (e AzureForUpsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzureForUpsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureForUpsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureForUpsertValidationError{}

// Validate checks the field values on RelAzureDataSourceForUpsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelAzureDataSourceForUpsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelAzureDataSourceForUpsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelAzureDataSourceForUpsertMultiError, or nil if none found.
func (m *RelAzureDataSourceForUpsert) ValidateAll() error {
	return m.validate(true)
}

func (m *RelAzureDataSourceForUpsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AzureId

	// no validation rules for AzureDataSourceId

	// no validation rules for ProjectId

	// no validation rules for Status

	// no validation rules for StatusDetail

	// no validation rules for ScanAt

	if len(errors) > 0 {
		return RelAzureDataSourceForUpsertMultiError(errors)
	}

	return nil
}

// RelAzureDataSourceForUpsertMultiError is an error wrapping multiple
// validation errors returned by RelAzureDataSourceForUpsert.ValidateAll() if
// the designated constraints aren't met.
type RelAzureDataSourceForUpsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelAzureDataSourceForUpsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelAzureDataSourceForUpsertMultiError) AllErrors() []error { return m }

// RelAzureDataSourceForUpsertValidationError is the validation error returned
// by RelAzureDataSourceForUpsert.Validate if the designated constraints
// aren't met.
type RelAzureDataSourceForUpsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelAzureDataSourceForUpsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelAzureDataSourceForUpsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelAzureDataSourceForUpsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelAzureDataSourceForUpsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelAzureDataSourceForUpsertValidationError) ErrorName() string {
	return "RelAzureDataSourceForUpsertValidationError"
}

// Error satisfies the builtin error interface
func (e RelAzureDataSourceForUpsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelAzureDataSourceForUpsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelAzureDataSourceForUpsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelAzureDataSourceForUpsertValidationError{}
